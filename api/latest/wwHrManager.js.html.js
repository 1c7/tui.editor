tui.util.defineNamespace("fedoc.content", {});
fedoc.content["wwHrManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements wysiwyg hr manager\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar domUtils = require('./domUtils');\n\n/**\n * WwHrManager\n * @exports WwHrManager\n * @constructor\n * @class WwHrManager\n * @param {WysiwygEditor} wwe WysiwygEditor instance\n */\nfunction WwHrManager(wwe) {\n    this.wwe = wwe;\n    this.eventManager = wwe.eventManager;\n\n    this._init();\n}\n/**\n * Name property\n * @api\n * @memberOf WwHrManager\n * @type {string}\n */\nWwHrManager.prototype.name = 'hr';\n\n/**\n * _init\n * Initialize\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._init = function() {\n    this._initKeyHandler();\n    this._initEvent();\n};\n\n/**\n * _initEvent\n * Initialize eventmanager event\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._initEvent = function() {\n    var self = this;\n\n    this.eventManager.listen('wysiwygSetValueAfter', function() {\n        self._unwrapDivOnHr();\n    });\n\n    this.eventManager.listen('wysiwygGetValueBefore', function() {\n        self._wrapDefaultBlockToOrphanTexts();\n    });\n};\n\n/**\n * _initKeyHandler\n * Initialize key event handler\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._initKeyHandler = function() {\n    var self = this;\n\n    this.wwe.addKeyEventHandler(function(ev, range) {\n        return self._onTypedInHr(range);\n    });\n\n    this.wwe.addKeyEventHandler('ENTER', function(ev, range) {\n        if (range.collapsed) {\n            return self._removeHrOnEnter(range, ev);\n        }\n\n        return true;\n    });\n\n    this.wwe.addKeyEventHandler('BACK_SPACE', function(ev, range) {\n        if (range.collapsed) {\n            return self._removeHrOnBackspace(range, ev);\n        }\n\n        return true;\n    });\n};\n\n/**\n * _isInHr\n * Check whether passed range is in hr or not\n * @param {Range} range range\n * @returns {boolean} result\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._isInHr = function(range) {\n    return domUtils.getNodeName(range.startContainer.childNodes[range.startOffset]) === 'HR';\n};\n\n/**\n * _isNearHr\n * Check whether passed range is near hr or not\n * @param {Range} range range\n * @returns {boolean} result\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._isNearHr = function(range) {\n    var prevNode = domUtils.getChildNodeByOffset(range.startContainer, range.startOffset - 1);\n\n    return domUtils.getNodeName(prevNode) === 'HR';\n};\n\n/**\n * Handler for delete HR when user typing within\n * @param {Range} range Range object\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._onTypedInHr = function(range) {\n    var self = this;\n\n    //HR위에서 테스트 컨텐츠 입력을 시도한경우에 대한 대비\n    if (this._isInHr(range) || this._isNearHr(range)) {\n        this.wwe.defer(function(wwe) {\n            wwe.saveSelection();\n            self._wrapDefaultBlockToOrphanTexts();\n            wwe.restoreSavedSelection();\n        });\n    }\n};\n\n/**\n * _removeHrOnEnter\n * Remove hr if need on enter\n * @param {Range} range range\n * @param {Event} ev event\n * @returns {boolean} return true if hr was removed\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._removeHrOnEnter = function(range, ev) {\n    var hrSuspect, blockPosition;\n\n    if (this._isInHr(range)) {\n        hrSuspect = domUtils.getChildNodeByOffset(range.startContainer, range.startOffset);\n    } else if (this._isNearHr(range)) {\n        hrSuspect = domUtils.getChildNodeByOffset(range.startContainer, range.startOffset - 1);\n        blockPosition = 'before';\n    }\n\n    return this._changeHrToNewDefaultBlock(hrSuspect, range, ev, blockPosition);\n};\n\n/**\n * _removeHrOnBackspace\n * Remove hr if need on backspace\n * @param {Range} range range\n * @param {Event} ev event\n * @returns {boolean} return true if hr was removed\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._removeHrOnBackspace = function(range, ev) {\n    var hrSuspect, blockPosition;\n\n    if (this._isInHr(range)) {\n        hrSuspect = domUtils.getChildNodeByOffset(range.startContainer, range.startOffset);\n    } else if (range.startOffset === 0) {\n        hrSuspect = domUtils.getTopPrevNodeUnder(range.startContainer, this.wwe.get$Body()[0]);\n        blockPosition = 'none';\n    } else if (this._isNearHr(range)) {\n        hrSuspect = domUtils.getChildNodeByOffset(range.startContainer, range.startOffset - 1);\n        blockPosition = 'before';\n    }\n\n    return this._changeHrToNewDefaultBlock(hrSuspect, range, ev, blockPosition);\n};\n\n/**\n * _changeHrToNewDefaultBlock\n * Remove hr and add new default block then set range to it\n * @param {Node} hrSuspect Node could be hr\n * @param {Range} range range\n * @param {Event} ev event\n * @param {strong} newBlockPosition new default block add position\n * @returns {boolean} return true if hr was removed\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._changeHrToNewDefaultBlock = function(hrSuspect, range, ev, newBlockPosition) {\n    if (hrSuspect &amp;&amp; domUtils.getNodeName(hrSuspect) === 'HR') {\n        ev.preventDefault();\n\n        if (newBlockPosition !== 'none') {\n            this.wwe.breakToNewDefaultBlock(range, newBlockPosition);\n        }\n\n        $(hrSuspect).remove();\n\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * _unwrapDivOnHr\n * Unwrap default block on hr\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._unwrapDivOnHr = function() {\n    this.wwe.get$Body().find('hr').each(function(index, node) {\n        if ($(node).parent().is('div')) {\n            $(node).parent().find('br').remove();\n            $(node).unwrap();\n        }\n    });\n};\n\n\n/**\n * findTextNodeFilter\n * @function\n * @this Node\n * @returns {boolean}\n */\nfunction findTextNodeFilter() {\n    return this.nodeType === Node.TEXT_NODE;\n}\n\n/**\n * _wrapDefaultBlockToOrphanTexts\n * Wrap default block to orphan texts\n * mainly, this is used for orphan text that made by controlling hr\n * @memberOf WwHrManager\n * @private\n */\nWwHrManager.prototype._wrapDefaultBlockToOrphanTexts = function() {\n    var textNodes;\n\n    textNodes = this.wwe.get$Body().contents().filter(findTextNodeFilter);\n\n    textNodes.each(function(i, node) {\n        $(node).wrap('&lt;div />');\n    });\n};\n\nmodule.exports = WwHrManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"