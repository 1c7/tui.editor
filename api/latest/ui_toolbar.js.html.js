tui.util.defineNamespace("fedoc.content", {});
fedoc.content["ui_toolbar.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar UIController = require('./uicontroller'),\n    Button = require('./button');\n\nvar util = tui.util;\n\n/**\n * Toolbar\n * @exports Toolbar\n * @augments UIController\n * @constructor\n * @class\n * @param {EventManager} eventManager 이벤트 매니저\n */\nfunction Toolbar(eventManager) {\n    UIController.call(this, {\n        tagName: 'div',\n        className: 'tui-editor-defaultUI-toolbar'\n    });\n\n    this.buttons = [];\n\n    this.eventManager = eventManager;\n\n    this.render();\n    this._initButton();\n}\n\nToolbar.prototype = util.extend(\n    {},\n    UIController.prototype\n);\n\n/**\n * render\n * Render toolbar\n */\nToolbar.prototype.render = function() {\n    this.$buttonContainer = this.$el;\n};\n\n/**\n * 버튼을 추가한다\n * @param {Button} button 버튼\n * @param {Number} index 버튼위치 (optional)\n */\nToolbar.prototype.addButton = function(button, index) {\n    var ev = this.eventManager;\n\n    if (!button.render) {\n        button = new Button(button);\n    }\n\n    button.on('command', function emitCommandEvent($, commandName) {\n        ev.emit('command', commandName);\n    });\n\n    button.on('event', function emitEventByCommand($, eventName) {\n        ev.emit(eventName);\n    });\n\n    this.buttons.push(button);\n\n    if (index) {\n        this.$buttonContainer.find('button').eq(index - 1).after(button.$el);\n    } else {\n        this.$buttonContainer.append(button.$el);\n    }\n};\n\n/**\n * 필요한 버튼들을 추가한다.\n */\nToolbar.prototype._initButton = function() {\n    this.addButton(new Button({\n        className: 'tui-heading',\n        event: 'openHeadingSelect',\n        tooltip: '제목크기'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-bold',\n        command: 'Bold',\n        tooltip: '굵게'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-italic',\n        command: 'Italic',\n        tooltip: '기울임꼴'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-strike',\n        command: 'Strike',\n        text: '~',\n        tooltip: '취소선'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-hrline',\n        command: 'HR',\n        tooltip: '문단나눔'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-quote',\n        command: 'Blockquote',\n        tooltip: '인용구'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-ul',\n        command: 'UL',\n        tooltip: '글머리 기호'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-ol',\n        command: 'OL',\n        tooltip: '번호 매기기'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-task',\n        command: 'Task',\n        tooltip: '체크박스'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-table',\n        event: 'openPopupAddTable',\n        tooltip: '표 삽입'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-link',\n        event: 'openPopupAddLink',\n        tooltip: '링크 삽입'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-codeblock',\n        command: 'CodeBlock',\n        text: 'CB',\n        tooltip: '코드블럭 삽입'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-code',\n        command: 'Code',\n        tooltip: '코드 삽입'\n    }));\n\n    this.addButton(new Button({\n        className: 'tui-image',\n        event: 'openPopupAddImage',\n        tooltip: '이미지 삽입'\n    }));\n};\n\nmodule.exports = Toolbar;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"