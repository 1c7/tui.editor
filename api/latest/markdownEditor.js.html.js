tui.util.defineNamespace("fedoc.content", {});
fedoc.content["markdownEditor.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar keyMapper = require('./keyMapper').getSharedInstance();\nvar MdTextObject = require('./mdTextObject');\n\nvar CodeMirror = window.CodeMirror;\n\n/**\n * MarkdownEditor\n * @exports MarkdownEditor\n * @constructor\n * @class MarkdownEditor\n * @param {jQuery} $el element to insert editor\n * @param {EventManager} eventManager EventManager instance\n */\nfunction MarkdownEditor($el, eventManager) {\n    this.eventManager = eventManager;\n    this.$editorContainerEl = $el;\n\n    this._latestState = {\n        bold: false,\n        italic: false\n    };\n}\n\n/**\n * init\n * @api\n * @memberOf WysiwygEditor\n * @param {string} initialValue Editor's initial content\n */\nMarkdownEditor.prototype.init = function(initialValue) {\n    var cmTextarea = $('&lt;textarea />');\n\n    if (initialValue) {\n        cmTextarea.text(initialValue);\n        this._emitMarkdownEditorContentChangedEvent(initialValue);\n    }\n\n    this.$editorContainerEl.append(cmTextarea);\n\n    this.cm = CodeMirror.fromTextArea(cmTextarea[0], {\n        lineWrapping: true,\n        mode: 'gfm',\n        theme: 'default',\n        dragDrop: true,\n        allowDropFileTypes: ['image'],\n        extraKeys: {\n            'Enter': 'newlineAndIndentContinue',\n            'Tab': 'subListIndentTab',\n            'Shift-Tab': 'indentLess'\n        },\n        indentUnit: 4\n    });\n\n    this._initEvent();\n};\n\n/**\n * _initEvent\n * Initialize EventManager event handler\n * @memberOf MarkdownEditor\n * @private\n */\nMarkdownEditor.prototype._initEvent = function() {\n    var self = this;\n\n    this.cm.getWrapperElement().addEventListener('click', function() {\n        self.eventManager.emit('click', {\n            source: 'markdown'\n        });\n    });\n\n    this.cm.on('change', function(cm, cmEvent) {\n        self._emitMarkdownEditorContentChangedEvent();\n        self._emitMarkdownEditorChangeEvent(cmEvent);\n    });\n\n    this.cm.on('focus', function() {\n        self.eventManager.emit('focus', {\n            source: 'markdown'\n        });\n        self.getEditor().refresh();\n    });\n\n    this.cm.on('blur', function() {\n        self.eventManager.emit('blur', {\n            source: 'markdown'\n        });\n    });\n\n    this.cm.on('scroll', function(cm, eventData) {\n        self.eventManager.emit('scroll', {\n            source: 'markdown',\n            data: eventData\n        });\n    });\n\n    this.cm.on('keydown', function(cm, keyboardEvent) {\n        self.eventManager.emit('keydown', {\n            source: 'markdown',\n            data: keyboardEvent\n        });\n\n        self.eventManager.emit('keyMap', {\n            source: 'markdown',\n            keyMap: keyMapper.convert(keyboardEvent),\n            data: keyboardEvent\n        });\n    });\n\n    this.cm.on('keyup', function(cm, keyboardEvent) {\n        self.eventManager.emit('keyup', {\n            source: 'markdown',\n            data: keyboardEvent\n        });\n    });\n\n    this.cm.on('paste', function(cm, clipboardEvent) {\n        self.eventManager.emit('paste', {\n            source: 'markdown',\n            data: clipboardEvent\n        });\n    });\n\n    this.cm.on('drop', function(cm, eventData) {\n        eventData.preventDefault();\n\n        self.eventManager.emit('drop', {\n            source: 'markdown',\n            data: eventData\n        });\n    });\n\n    this.cm.on('cursorActivity', function() {\n        var token, state, base, overlay;\n\n        token = self.cm.getTokenAt(self.cm.getCursor());\n\n        base = token.state.base;\n        overlay = token.state.overlay;\n\n        state = {\n            bold: !!base.strong,\n            italic: !!base.em,\n            code: !!overlay.code,\n            codeBlock: !!overlay.codeBlock,\n            source: 'markdown'\n        };\n\n        if (self._isStateChanged(self._latestState, state)) {\n            self.eventManager.emit('stateChange', state);\n            self._latestState = state;\n        }\n    });\n};\n\n/**\n * getCurrentRange\n * returns current selection's range\n * @api\n * @memberOf MarkdownEditor\n * @returns {object} selection range\n */\nMarkdownEditor.prototype.getCurrentRange = function() {\n    var from = this.cm.getCursor('from'),\n        to = this.cm.getCursor('to');\n\n    return {\n        from: from,\n        to: to,\n        collapsed: from === to\n    };\n};\n\n/**\n * Set focus to current Editor\n * @api\n * @memberOf MarkdownEditor\n */\nMarkdownEditor.prototype.focus = function() {\n    this.cm.focus();\n};\n\n/**\n * Remove Editor from document\n * @api\n * @memberOf MarkdownEditor\n */\nMarkdownEditor.prototype.remove = function() {\n    this.cm.toTextArea();\n};\n\n/**\n * Set Editor value\n * @api\n * @memberOf MarkdownEditor\n * @param {string} markdown Markdown syntax text\n */\nMarkdownEditor.prototype.setValue = function(markdown) {\n    this.getEditor().setValue(markdown);\n    this._emitMarkdownEditorContentChangedEvent();\n    this.moveCursorToEnd();\n    this.getEditor().refresh();\n};\n\n/**\n * Get editor value\n * @api\n * @memberOf MarkdownEditor\n * @returns {string}\n */\nMarkdownEditor.prototype.getValue = function() {\n    return this.cm.getValue('\\n');\n};\n\n/**\n * Get CodeMirror instance\n * @api\n * @memberOf MarkdownEditor\n * @returns {CodeMirror}\n */\nMarkdownEditor.prototype.getEditor = function() {\n    return this.cm;\n};\n\n/**\n * Reset Editor\n * @api\n * @memberOf MarkdownEditor\n */\nMarkdownEditor.prototype.reset = function() {\n    this.setValue('');\n};\n\n/**\n * Emit contentChangedFromMarkdown event\n * @memberOf MarkdownEditor\n * @private\n */\nMarkdownEditor.prototype._emitMarkdownEditorContentChangedEvent = function() {\n    this.eventManager.emit('contentChangedFromMarkdown', this);\n};\n\n/**\n * Clone CodeMirror event object\n * @memberOf MarkdownEditor\n * @param {event} e Event object\n * @returns {{from: {line: number, ch: number}, to: {line: number, ch: number}}}\n * @private\n */\nMarkdownEditor.prototype._cloneCMEventObject = function(e) {\n    return {\n        from: {\n            line: e.from.line,\n            ch: e.from.ch\n        },\n        to: {\n            line: e.to.line,\n            ch: e.to.ch\n        }\n    };\n};\n\n/**\n * Emit changeEvent\n * @memberOf MarkdownEditor\n * @param {event} e Event object\n * @private\n */\nMarkdownEditor.prototype._emitMarkdownEditorChangeEvent = function(e) {\n    var eventObj;\n\n    if (e.origin !== 'setValue') {\n        eventObj = {\n            source: 'markdown'\n        };\n\n        this.eventManager.emit('changeFromMarkdown', eventObj);\n        this.eventManager.emit('change', eventObj);\n    }\n};\n\n/**\n * Get current caret position\n * @api\n * @memberOf MarkdownEditor\n * @returns {{from: {line: number, ch: number}, to: {line: number, ch: number}}}\n */\nMarkdownEditor.prototype.getCaretPosition = function() {\n    return this.cm.cursorCoords();\n};\n\n/**\n * Add widget\n * @api\n * @memberOf MarkdownEditor\n * @param {object} selection Selection object\n * @param {HTMLElement} node Widget node\n * @param {string} style Adding style \"over\" or \"bottom\"\n * @param {number} offset Adding offset\n */\nMarkdownEditor.prototype.addWidget = function(selection, node, style, offset) {\n    if (offset) {\n        selection.ch += offset;\n    }\n\n    this.cm.addWidget(selection.end, node, true, style);\n};\n\n/**\n * Replace selection with given replacement content\n * @api\n * @memberOf MarkdownEditor\n * @param {string} content Replacement content text\n * @param {object} selection Selection object\n */\nMarkdownEditor.prototype.replaceSelection = function(content, selection) {\n    if (selection) {\n        this.cm.setSelection(selection.from, selection.to);\n    }\n\n    this.cm.replaceSelection(content);\n    this.focus();\n};\n\n/**\n * Replace selection with replacement content and offset\n * @api\n * @memberOf MarkdownEditor\n * @param {string} content Replacement content text\n * @param {number} offset Offset\n * @param {number} overwriteLength Length to overwrite\n */\nMarkdownEditor.prototype.replaceRelativeOffset = function(content, offset, overwriteLength) {\n    var cursor = this.cm.getCursor(),\n        selection = {\n            from: {\n                line: cursor.line,\n                ch: cursor.ch + offset\n            },\n            to: {\n                line: cursor.line,\n                ch: (cursor.ch + offset) + overwriteLength\n            }\n        };\n\n    this.replaceSelection(content, selection);\n};\n\n/**\n * Set Editor height\n * @api\n * @memberOf MarkdownEditor\n * @param {number} height Editor height\n */\nMarkdownEditor.prototype.setHeight = function(height) {\n    this.$editorContainerEl.height(height);\n\n    if (height === 'auto') {\n        this.$editorContainerEl.find('.CodeMirror').height('auto');\n    }\n};\n\n/**\n * Set cursor position to end\n * @api\n * @memberOf MarkdownEditor\n */\nMarkdownEditor.prototype.moveCursorToEnd = function() {\n    var doc = this.getEditor().getDoc(),\n        lastLine = doc.lastLine();\n\n    doc.setCursor(lastLine, doc.getLine(lastLine).length);\n};\n\n/**\n * Set cursor position to start\n * @api\n * @memberOf MarkdownEditor\n */\nMarkdownEditor.prototype.moveCursorToStart = function() {\n    var doc = this.getEditor().getDoc(),\n        firstLine = doc.firstLine();\n\n    doc.setCursor(firstLine, 0);\n};\n\n/**\n * Scroll Editor content to Top\n * @api\n * @memberOf MarkdownEditor\n * @param {number} value Scroll amount\n * @returns {number}\n */\nMarkdownEditor.prototype.scrollTop = function(value) {\n    if (value) {\n        this.cm.scrollTo(0, value);\n    }\n\n    return this.cm.getScrollInfo().top;\n};\n\n/**\n * Get start, end position of current selection\n * @api\n * @memberOf MarkdownEditor\n * @returns {{start: {line: *, ch: *}, end: {line: *, ch: *}}}\n */\nMarkdownEditor.prototype.getRange = function() {\n    var start = this.getEditor().getCursor('from');\n    var end = this.getEditor().getCursor('to');\n\n    return {\n        start: {\n            line: start.line,\n            ch: start.ch\n        },\n        end: {\n            line: end.line,\n            ch: end.ch\n        }\n    };\n};\n\n/**\n * Get text object of current range\n * @api\n * @memberOf MarkdownEditor\n * @param {{start, end}} range Range object of each editor\n * @returns {object}\n */\nMarkdownEditor.prototype.getTextObject = function(range) {\n    return new MdTextObject(this, range);\n};\n\n/**\n * Return whether state changed or not\n * @memberOf MarkdownEditor\n * @param {object} previousState Previous state\n * @param {object} currentState Current state\n * @returns {boolean}\n * @private\n */\nMarkdownEditor.prototype._isStateChanged = function(previousState, currentState) {\n    var result = false;\n\n    tui.util.forEach(currentState, function(currentStateTypeValue, stateType) {\n        var isNeedToContinue = true;\n        var isStateChanged = previousState[stateType] !== currentStateTypeValue;\n\n        if (isStateChanged) {\n            result = true;\n            isNeedToContinue = false;\n        }\n\n        return isNeedToContinue;\n    });\n\n    return result;\n};\n\nmodule.exports = MarkdownEditor;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"