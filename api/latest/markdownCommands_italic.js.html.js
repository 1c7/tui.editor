tui.util.defineNamespace("fedoc.content", {});
fedoc.content["markdownCommands_italic.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements Italic markdown command\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar CommandManager = require('../commandManager');\n\nvar boldItalicRegex = /^[\\*_]{3,}[^\\*_]*[\\*_]{3,}$/;\nvar italicRegex = /^[\\*_][^\\*_]*[\\*_]$/;\n\n/**\n * Italic\n * Add italic markdown syntax to markdown editor\n * @exports Italic\n * @augments Command\n */\nvar Italic = CommandManager.command('markdown', /** @lends Italic */{\n    name: 'Italic',\n    keyMap: ['CTRL+I', 'META+I'],\n    /**\n     * Command handler\n     * @param {MarkdownEditor} mde MarkdownEditor instance\n     */\n    exec: function(mde) {\n        var cursor, selection, tmpSelection, isRemoved, result, isEmpty, isWithBold,\n            cm = mde.getEditor(),\n            doc = cm.getDoc();\n\n        cursor = doc.getCursor();\n        selection = doc.getSelection();\n        isEmpty = !selection;\n        isWithBold = false;\n\n        // if selection is empty, expend selection to detect a syntax\n        if (isEmpty) {\n            if (cursor.ch > 2) {\n                tmpSelection = this.expendWithBoldSelection(doc, cursor);\n\n                if (tmpSelection) {\n                    isWithBold = 'with';\n                }\n            }\n\n            if (isWithBold !== 'with' &amp;&amp; cursor.ch > 1) {\n                isWithBold = this.expendOnlyBoldSelection(doc, cursor);\n            }\n\n            if (!isWithBold &amp;&amp; cursor.ch > 0) {\n                this.expendSelection(doc, cursor);\n                selection = tmpSelection || selection;\n            }\n        }\n\n        isRemoved = this.isNeedRemove(selection);\n        result = isRemoved ? this.remove(selection) : this.append(selection);\n\n        doc.replaceSelection(result, 'around');\n\n        if (isEmpty) {\n            this.setCursorToCenter(doc, cursor, isRemoved);\n        }\n\n        cm.focus();\n    },\n    /**\n     * isNeedRemove\n     * 이미 텍스트에 이탤릭이나 볼드가 적용되어 있는지 판단한다\n     * @param {string} text 텍스트\n     * @returns {boolean} 적용 여부\n     */\n    isNeedRemove: function(text) {\n        return italicRegex.test(text) || boldItalicRegex.test(text);\n    },\n    /**\n     * append\n     * 텍스트에 이탤릭을 적용한다\n     * @param {string} text 적용할 텍스트\n     * @returns {string} 이탤릭이 적용된 텍스트\n     */\n    append: function(text) {\n        return '_' + text + '_';\n    },\n    /**\n     * remove\n     * 텍스트에서 이탤릭을 제거한다\n     * @param {string} text 제거할 텍스트\n     * @returns {string} 제거된 텍스트\n     */\n    remove: function(text) {\n        return text.substr(1, text.length - 2);\n    },\n    /**\n     * expendWithBoldSelection\n     * 볼드와 함께 적용된 셀렉션 영역을 확장한다\n     * @param {CodeMirror.doc} doc 코드미러 도큐먼트\n     * @param {object} cursor 커서객체\n     * @returns {string} 확장된 영역의 텍스트\n     */\n    expendWithBoldSelection: function(doc, cursor) {\n        var tmpSelection = doc.getSelection(),\n            result;\n\n        doc.setSelection({line: cursor.line, ch: cursor.ch - 3}, {line: cursor.line, ch: cursor.ch + 3});\n\n        if (tmpSelection === '******' || tmpSelection === '______') {\n            result = tmpSelection;\n        } else {\n            doc.setSelection(cursor);\n        }\n\n        return result;\n    },\n    /**\n     * expendOnlyBoldSelection\n     * 볼드만 적용된 셀렉션 영역을 확장한다\n     * @param {CodeMirror.doc} doc 코드미러 도큐먼트\n     * @param {object} cursor 커서객체\n     * @returns {string} 확장된 영역의 텍스트\n     */\n    expendOnlyBoldSelection: function(doc, cursor) {\n        var tmpSelection = doc.getSelection(),\n            result = false;\n\n        doc.setSelection({line: cursor.line, ch: cursor.ch - 2}, {line: cursor.line, ch: cursor.ch + 2});\n\n        if (tmpSelection === '****' || tmpSelection === '____') {\n            doc.setSelection(cursor);\n            result = 'only';\n        }\n\n        return result;\n    },\n    /**\n     * expendSelection\n     * 이탤릭이 적용된 셀렉션 영역을 확장한다\n     * @param {CodeMirror.doc} doc 코드미러 도큐먼트\n     * @param {object} cursor 커서객체\n     * @returns {string} 확장된 영역의 텍스트\n     */\n    expendSelection: function(doc, cursor) {\n        var tmpSelection = doc.getSelection(),\n            result;\n\n        doc.setSelection({line: cursor.line, ch: cursor.ch - 2}, {line: cursor.line, ch: cursor.ch + 2});\n\n        if (tmpSelection === '****' || tmpSelection === '____') {\n            result = tmpSelection;\n        } else {\n            doc.setSelection(cursor);\n        }\n\n        return result;\n    },\n    /**\n     * setCursorToCenter\n     * 커서를 중앙으로 이동시킨다\n     * @param {CodeMirror.doc} doc 코드미러 도큐먼트\n     * @param {object} cursor 커서객체\n     * @param {boolean} isRemoved 변경사항이 지우는 변경이었는지 여부\n     */\n    setCursorToCenter: function(doc, cursor, isRemoved) {\n        var pos = isRemoved ? -1 : 1;\n        doc.setCursor(cursor.line, cursor.ch + pos);\n    }\n});\n\nmodule.exports = Italic;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"