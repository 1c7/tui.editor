tui.util.defineNamespace("fedoc.content", {});
fedoc.content["ui_uicontroller.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview HTML UI를 관리하는 컨트롤러\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar util = tui.util,\n    _id = 0;\n/**\n * UIController 클래스\n * @exports UIController\n * @constructor\n * @class\n * @param {Object} options 옵션\n * @param {jQuery} options.rootElement 이니셜라이즈할때 el에 들어갈 루트 엘리먼트를 셋팅할수있다.\n */\nfunction UIController(options) {\n    options = util.extend({\n        tagName: 'div'\n    }, options || {});\n\n    this.tagName = options.tagName;\n    this.className = options.className;\n\n    /**\n     * rootElement\n     * @type {jQuery}\n     */\n    this.$el = null;\n\n    this._initID();\n\n    this.setRootElement(options.rootElement);\n}\n\n\n/**********\n * method\n **********/\n\n/**\n * UIC에 custom event을 걸거나 jQuery를 이용해 dom에 이벤트를 건다.\n * @param {string} aType 이벤트명과 셀렉터 스트링\n * @param {function} aFn 이벤트 핸들러\n */\nUIController.prototype.on = function(aType, aFn) {\n    var self = this;\n\n    if (util.isObject(aType)) {\n        util.forEach(aType, function(fn, type) {\n            self._addEvent(type, fn);\n        });\n    } else {\n        this._addEvent(aType, aFn);\n    }\n};\n\n/**\n * 이벤트를 바인드한다.\n * DOM이벤트가 전달되면 jQuery이벤트 처리기를 이용하고\n * DOM이벤트가 아니면 CustomEvent를 이용한다.\n * @param {string} type 이벤트명과 셀렉터 스트링\n * @param {function} fn 이벤트 핸들러\n * @private\n */\nUIController.prototype._addEvent = function(type, fn) {\n    var parsedType = this._parseEventType(type),\n        event = parsedType[0],\n        selector = parsedType[1];\n\n    if (selector) {\n        this.$el.on(event, selector, fn);\n    } else {\n        this.$el.on(event, fn);\n    }\n};\n\n/**\n * 이벤트를 지운다.\n * DOM이벤트가 전달되면 jQuery이벤트 처리기를 이용하고\n * DOM이벤트가 아니면 CustomEvent를 이용한다.\n * @param {string} type 이벤트명과 셀렉터 스트링\n * @param {function} fn 이벤트 핸들러\n */\nUIController.prototype.off = function(type, fn) {\n    var parsedType,\n        event,\n        selector;\n\n    if (type) {\n        parsedType = this._parseEventType(type);\n        event = parsedType[0];\n        selector = parsedType[1];\n\n        if (selector) {\n            this.$el.off(event, selector, fn);\n        } else {\n            this.$el.off(event, fn);\n        }\n    } else {\n        this.$el.off();\n    }\n};\n\n/**\n * 이벤트 바안딩 텍스트를 전달받아 이벤트 명과 셀렉터로 분리해준다.\n * 'click td' => ['click', 'td]\n * @param {string} type 이벤트쿼리 스트링\n * @returns {array} Event, Selector\n */\nUIController.prototype._parseEventType = function(type) {\n    var splitType = type.split(' '),\n        event = splitType.shift(),\n        selector = splitType.join(' ');\n\n    return [event, selector];\n};\n\n/**\n * 파라메터로 넘어오는 이벤트 리스트 혹은 this.events를 토대로 dom 이벤트를 한꺼번에 바인드한다.\n * @param {object} events 이벤트 목록\n */\nUIController.prototype.attachEvents = function(events) {\n    var self = this,\n        handler,\n        eventlist = events || this.events;\n\n    if (eventlist) {\n        util.forEach(eventlist, function(handlerName, type) {\n            if (self[handlerName]) {\n                type = self.getEventNameWithNamespace(type);\n                handler = util.bind(self[handlerName], self);\n                self.on(type, handler);\n            } else {\n                throw new Error('UIController#attachEvents: ' + handlerName + '란 메서드가 없습니다.');\n            }\n        });\n    }\n};\n\n/**\n * attachEvents로 걸린 이벤트핸들러를 한꺼번에 해제한다.\n */\nUIController.prototype.detachEvents = function() {\n    this.$el.off('.uicEvent' + this.id);\n};\n\n/**\n * UIC의 rootElement인 this.$el을 설정한다 인자가 없으면 생성한다.\n * @param {jQuery} $el 설정할 엘리먼트\n */\nUIController.prototype.setRootElement = function($el) {\n    var className = this.className,\n        tagName = this.tagName;\n\n    if (!$el) {\n        className = className || ('uic' + this.id);\n        $el = $('&lt;' + tagName + ' class=\"' + className + '\"/>');\n    }\n    this.$el = $el;\n};\n\n/**\n * 커스텀 이벤트를 발생시킨다.\n */\nUIController.prototype.trigger = function() {\n    this.$el.trigger.apply(this.$el, arguments);\n};\n\n/**\n * id를 생성한다.\n * @private\n */\nUIController.prototype._initID = function() {\n    this.id = _id;\n    _id += 1;\n};\n\n/**\n * 이벤트종류에 네임스페이스를 더한다.\n * \"click\" -> \"click.uicEvent23\"\n * @param {string} event 이벤트 핸들러, 셀릭터 스트링\n * @returns {string} 네임스페이스가 포함된 이벤트스트링\n */\nUIController.prototype.getEventNameWithNamespace = function(event) {\n    var eventSplited = event.split(' ');\n    eventSplited[0] += ('.uicEvent' + this.id);\n    return eventSplited.join(' ');\n};\n\n/**\n * uic안에 서브uic를 삽입한다.\n * 두번째 인자로 셀렉터를 넘기면 this.$el이 아닌 셀렉터에 해당하는 엘리먼트를 찾아서 그엘리먼트에 서브 UIC의 엘리먼트를 붙인다.\n * @param {UIController} uic UIController instance\n * @param {string} [targetSEL] 셀렉터\n */\nUIController.prototype.addUIC = function(uic, targetSEL) {\n    if (targetSEL) {\n        this.$el.find(targetSEL).append(uic.$el);\n    } else {\n        this.$el.append(uic.$el);\n    }\n};\n\n/**\n * 엘리먼트의 이벤트를 해제 후 제거한다.\n */\nUIController.prototype.remove = function() {\n    this.detachEvents();\n    this.$el.remove();\n};\n\n/**\n * 소멸자\n */\nUIController.prototype.destroy = function() {\n    var self = this;\n\n    this.remove();\n    this.detachEvents();\n\n    util.forEachOwnProperties(this, function(value, key) {\n        self[key] = null;\n    });\n};\n\n/**\n * UIController를 확장해 새 생성자를 만든다.\n * @param {Object} props properties to extend\n * @returns {UIController} 생성자\n */\nUIController.extend = function(props) {\n    var newUIC = util.defineClass(this, props);\n    newUIC.extend = UIController.extend;\n    return newUIC;\n};\n\nmodule.exports = UIController;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"