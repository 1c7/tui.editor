tui.util.defineNamespace("fedoc.content", {});
fedoc.content["importManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implement Module for managing import external data such as image\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar excelTableParser = require('./excelTableParser');\n\nvar util = tui.util;\n\nvar FIND_EXCEL_DATA = /^(([^\\n\\r]*|\"[^\"]+\")(\\t([^\\n\\r]*?|\"[^\"]+\")){1,}[\\r\\n]*){1,}$/;\n\n/**\n * ImportManager\n * @exports ImportManager\n * @constructor\n * @class ImportManager\n * @param {EventManager} eventManager eventManager\n */\nfunction ImportManager(eventManager) {\n    this.eventManager = eventManager;\n\n    this._initDropEvent();\n    this._initPasteEvent();\n    this._initDefaultImageImporter();\n}\n\n/**\n * Initialize drop event\n * @memberOf ImportManager\n * @private\n */\nImportManager.prototype._initDropEvent = function() {\n    var self = this;\n\n    this.eventManager.listen('drop', function(ev) {\n        var items = ev.data.dataTransfer &amp;&amp; ev.data.dataTransfer.files;\n        self._processBlobItems(items, ev.data);\n    });\n};\n\n/**\n * Initialize paste event\n * @memberOf ImportManager\n * @private\n */\nImportManager.prototype._initPasteEvent = function() {\n    var self = this;\n\n    this.eventManager.listen('paste', function(ev) {\n        self._processClipboard(ev.data);\n    });\n};\n\n/**\n * Initialize default image importer\n * @memberOf ImportManager\n * @private\n */\nImportManager.prototype._initDefaultImageImporter = function() {\n    this.eventManager.listen('addImageBlobHook', function(blob, callback) {\n        var reader = new FileReader();\n\n        reader.onload = function(event) {\n            callback(event.target.result);\n        };\n\n        reader.readAsDataURL(blob);\n    });\n};\n\n/**\n * Emit add image blob hook\n * @memberOf ImportManager\n * @param {object} item item\n * @private\n */\nImportManager.prototype._emitAddImageBlobHook = function(item) {\n    var self = this,\n        blob = item.name ? item : item.getAsFile(); //Blob or File\n\n    this.eventManager.emit('addImageBlobHook', blob, function(url) {\n        self.eventManager.emit('command', 'AddImage', {imageUrl: url, altText: blob.name || 'image'});\n    });\n};\n\n/**\n * Add table with excel style data\n * @memberOf ImportManager\n * @param {string} content Table data\n * @private\n */\nImportManager.prototype._addExcelTable = function(content) {\n    var tableInfo = excelTableParser(content);\n    this.eventManager.emit('command', 'Table', tableInfo.col, tableInfo.row, tableInfo.data);\n};\n\n/**\n * Get blob or excel data from clipboard\n * @memberOf ImportManager\n * @param {object} evData Clipboard data\n * @private\n */\nImportManager.prototype._processClipboard = function(evData) {\n    var blobItems,\n        cbData, types;\n\n    cbData = evData.clipboardData || window.clipboardData;\n\n    blobItems = cbData &amp;&amp; cbData.items;\n    types = cbData.types;\n\n    if (blobItems &amp;&amp; types &amp;&amp; types.length === 1 &amp;&amp; util.inArray('Files', types) !== -1) {\n        this._processBlobItems(blobItems, evData);\n    } else {\n        this._precessDataTransfer(cbData, evData);\n    }\n};\n\n/**\n * Process for blob item\n * @memberOf ImportManager\n * @param {Array.&lt;string>} items Item array\n * @param {object} evData Event data\n * @private\n */\nImportManager.prototype._processBlobItems = function(items, evData) {\n    var self = this;\n\n    if (items) {\n        util.forEachArray(items, function(item) {\n            if (item.type.indexOf('image') !== -1) {\n                evData.preventDefault();\n                evData.codemirrorIgnore = true;\n                self._emitAddImageBlobHook(item);\n\n                return false;\n            }\n\n            return true;\n        });\n    }\n};\n\n/**\n * Process for excel style data\n * @memberOf ImportManager\n * @param {HTMLElement} cbData Clipboard data\n * @param {object} evData Event data\n * @private\n */\nImportManager.prototype._precessDataTransfer = function(cbData, evData) {\n    var content;\n\n    content = cbData.getData('text');\n\n    if (FIND_EXCEL_DATA.test(content) &amp;&amp; confirm('테이블 포맷으로 붙여넣겠습니까?')) {\n        evData.preventDefault();\n        evData.codemirrorIgnore = true;\n        this._addExcelTable(content);\n    }\n};\n\nmodule.exports = ImportManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"