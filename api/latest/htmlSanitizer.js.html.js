tui.util.defineNamespace("fedoc.content", {});
fedoc.content["htmlSanitizer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements htmlSanitizer\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\nconst util = tui.util;\n\nconst HTML_ATTR_LIST_RX = new RegExp('^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' +\n    'color|cols|colspan|compact|coords|dir|face|headers|height|hreflang|hspace|' +\n    'ismap|lang|language|nohref|nowrap|rel|rev|rows|rowspan|rules|' +\n    'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' +\n    'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' +\n    'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)', 'g');\n\nconst SVG_ATTR_LIST_RX = new RegExp('^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' +\n    'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' +\n    'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' +\n    'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' +\n    'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' +\n    'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' +\n    'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' +\n    'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' +\n    'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' +\n    'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' +\n    'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' +\n    'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' +\n    'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' +\n    'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' +\n    'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)', 'g');\n\n/**\n * htmlSanitizer\n * @api\n * @exports htmlSanitizer\n * @param {string|Node} html html or Node\n * @param {boolean} [needHtmlText] pass true if need html text\n * @returns {string|DocumentFragment} result\n */\nfunction htmlSanitizer(html, needHtmlText) {\n    const $html = $('&lt;div />');\n\n    $html.append(html);\n\n    removeUnnecessaryTags($html);\n    leaveOnlyWhitelistAttribute($html);\n\n    return finalizeHtml($html, needHtmlText);\n}\n\n/**\n * Remove unnecessary tags\n * @private\n * @param {jQuery} $html jQuery instance\n */\nfunction removeUnnecessaryTags($html) {\n    $html.find('script, iframe, textarea, form, button, select, .Apple-converted-space').remove();\n}\n\n/**\n * Leave only white list attributes\n * @private\n * @param {jQuery} $html jQuery instance\n */\nfunction leaveOnlyWhitelistAttribute($html) {\n    $html.find('*').each((index, node) => {\n        const blacklist = util.toArray(node.attributes).filter(attr => {\n            const isHTMLAttr = attr.name.match(HTML_ATTR_LIST_RX);\n            const isSVGAttr = attr.name.match(SVG_ATTR_LIST_RX);\n\n            return !isHTMLAttr &amp;&amp; !isSVGAttr;\n        });\n\n        util.forEachArray(blacklist, attr => {\n            node.attributes.removeNamedItem(attr.name);\n        });\n    });\n}\n\n/**\n * Finalize html result\n * @private\n * @param {jQuery} $html jQuery instance\n * @param {boolean} needHtmlText pass true if need html text\n * @returns {string|DocumentFragment} result\n */\nfunction finalizeHtml($html, needHtmlText) {\n    let returnValue;\n\n    if (needHtmlText) {\n        returnValue = $html[0].innerHTML;\n    } else {\n        const frag = document.createDocumentFragment();\n        const childNodes = tui.util.toArray($html[0].childNodes);\n        const length = childNodes.length;\n\n        for (let i = 0; i &lt; length; i += 1) {\n            frag.appendChild(childNodes[i]);\n        }\n        returnValue = frag;\n    }\n\n    return returnValue;\n}\n\nmodule.exports = htmlSanitizer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"