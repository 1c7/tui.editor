tui.util.defineNamespace("fedoc.content", {});
fedoc.content["ui_popupAddTable.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements PopupAddTable\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar LayerPopup = require('./layerpopup');\n\nvar util = tui.util;\n\n/* eslint-disable indent */\nvar POPUP_CONTENT = [\n    '&lt;div class=\"te-table-selection\">',\n        '&lt;div class=\"te-table-header\">&lt;/div>',\n        '&lt;div class=\"te-table-body\">&lt;/div>',\n        '&lt;div class=\"te-selection-area\">&lt;/div>',\n    '&lt;/div>',\n    '&lt;p class=\"te-description\">&lt;/p>'\n].join('');\n/* eslint-enable indent */\n\nvar CELL_WIDTH = 25,\n    CELL_HEIGHT = 17,\n    MIN_ROW_INDEX = 7,\n    MAX_ROW_INDEX = 14,\n    MIN_COL_INDEX = 5,\n    MAX_COL_INDEX = 9,\n    MIN_ROW_SELECTION_INDEX = 1,\n    MIN_COL_SELECTION_INDEX = 1,\n    HEADER_ROW_COUNT = 1,\n    LAST_BORDER = 1;\n\n/**\n * PopupAddTable\n * It implements Popup to add a table\n * @exports PopupAddTable\n * @augments LayerPopup\n * @constructor\n * @class\n * @param {object} options options\n */\nfunction PopupAddTable(options) {\n    options = util.extend({\n        title: false,\n        className: 'te-popup-add-table',\n        content: POPUP_CONTENT\n    }, options);\n\n    LayerPopup.call(this, options);\n\n    this._selectedBound = {};\n    this._tableBound = {};\n    this.eventManager = options.eventManager;\n    this.$button = options.$button;\n\n    this.render();\n    this._cacheElements();\n    this._bindContentEvent();\n    this._linkWithEventManager();\n\n    this._setTableSizeByBound(MIN_COL_INDEX, MIN_ROW_INDEX);\n}\n\nPopupAddTable.prototype = util.extend(\n    {},\n    LayerPopup.prototype\n);\n\n/**\n * _cacheElements\n * Cache elements for use\n */\nPopupAddTable.prototype._cacheElements = function() {\n    this.$header = this.$el.find('.te-table-header');\n    this.$body = this.$el.find('.te-table-body');\n    this.$selection = this.$el.find('.te-selection-area');\n    this.$desc = this.$el.find('.te-description');\n};\n\n/**\n * _bindContentEvent\n * Bind element events\n */\nPopupAddTable.prototype._bindContentEvent = function() {\n    var self = this;\n\n    this.on('mousemove .te-table-selection', function(ev) {\n        var x = ev.pageX - self._selectionOffset.left,\n            y = ev.pageY - self._selectionOffset.top,\n            bound;\n\n        bound = self._getSelectionBoundByOffset(x, y);\n\n        self._resizeTableBySelectionIfNeed(bound.col, bound.row);\n\n        self._setSelectionAreaByBound(bound.col, bound.row);\n        self._setDisplayText(bound.col, bound.row);\n        self._setSelectedBound(bound.col, bound.row);\n    });\n\n    this.on('click .te-table-selection', function() {\n        var tableSize = self._getSelectedTableSize();\n        self.eventManager.emit('command', 'Table', tableSize.col, tableSize.row);\n    });\n};\n\n/**\n * _linkWithEventManager\n * Bind event manager event\n */\nPopupAddTable.prototype._linkWithEventManager = function() {\n    var self = this;\n\n    this.eventManager.listen('focus', function() {\n        self.hide();\n    });\n\n    this.eventManager.listen('openPopupAddTable', function() {\n        self.eventManager.emit('closeAllPopup');\n        self.$el.css({\n            'top': self.$button.position().top + self.$button.height() + 5,\n            'left': self.$button.position().left\n        });\n        self.show();\n        self._selectionOffset = self.$el.find('.te-table-selection').offset();\n    });\n\n    this.eventManager.listen('closeAllPopup', function() {\n        self.hide();\n    });\n};\n\n/**\n * _resizeTableBySelectionIfNeed\n * Resize table if need\n * @param {number} col column index\n * @param {number} row row index\n */\nPopupAddTable.prototype._resizeTableBySelectionIfNeed = function(col, row) {\n    var resizedBound = this._getResizedTableBound(col, row);\n\n    if (resizedBound) {\n        this._setTableSizeByBound(resizedBound.col, resizedBound.row);\n    }\n};\n\n/**\n * _getResizedTableBound\n * Get resized table bound if Need\n * @param {number} col column index\n * @param {number} row row index\n * @returns {object} bound\n */\nPopupAddTable.prototype._getResizedTableBound = function(col, row) {\n    var resizedCol, resizedRow, resizedBound;\n\n    if (col >= MIN_COL_INDEX &amp;&amp; col &lt; MAX_COL_INDEX) {\n        resizedCol = col + 1;\n    } else if (col &lt; MIN_COL_INDEX) {\n        resizedCol = MIN_COL_INDEX;\n    }\n\n    if (row >= MIN_ROW_INDEX &amp;&amp; row &lt; MAX_ROW_INDEX) {\n        resizedRow = row + 1;\n    } else if (row &lt; MIN_ROW_INDEX) {\n        resizedRow = MIN_ROW_INDEX;\n    }\n\n    if (this._isNeedResizeTable(resizedCol, resizedRow)) {\n        resizedBound = {\n            row: resizedRow || this._tableBound.row,\n            col: resizedCol || this._tableBound.col\n        };\n    }\n\n    return resizedBound;\n};\n\n/**\n * _isNeedResizeTable\n * check if need resize table\n * @param {number} col column index\n * @param {number} row row index\n * @returns {boolean} result\n */\nPopupAddTable.prototype._isNeedResizeTable = function(col, row) {\n    return (col &amp;&amp; col !== this._tableBound.col)\n        || (row &amp;&amp; row !== this._tableBound.row);\n};\n\n/**\n * _getBoundByOffset\n * Get bound by offset\n * @param {number} x offset\n * @param {number} y offset\n * @returns {object} bound\n */\nPopupAddTable.prototype._getBoundByOffset = function(x, y) {\n    var rowBound = parseInt(y / CELL_HEIGHT, 10),\n        colBound = parseInt(x / CELL_WIDTH, 10);\n\n    return {\n        row: rowBound,\n        col: colBound\n    };\n};\n\n/**\n * _getOffsetByBound\n * Get offset by bound\n * @param {number} col column index\n * @param {number} row row index\n * @returns {object} offset\n */\nPopupAddTable.prototype._getOffsetByBound = function(col, row) {\n    var x = (col * CELL_WIDTH) + CELL_WIDTH,\n        y = (row * CELL_HEIGHT) + CELL_HEIGHT;\n\n    return {\n        x: x,\n        y: y\n    };\n};\n\n/**\n * _setTableSizeByBound\n * Set table size with bound\n * @param {number} col column index\n * @param {number} row row index\n */\nPopupAddTable.prototype._setTableSizeByBound = function(col, row) {\n    var boundOffset = this._getOffsetByBound(col, row - HEADER_ROW_COUNT);\n    this._setTableSize(boundOffset.x, boundOffset.y);\n    this._tableBound.row = row;\n    this._tableBound.col = col;\n};\n\n/**\n * _getSelectionBoundByOffset\n * Get selection bound that process with range by offset\n * @param {number} x offset\n * @param {number} y offset\n * @returns {object} bound\n */\nPopupAddTable.prototype._getSelectionBoundByOffset = function(x, y) {\n    var bound = this._getBoundByOffset(x, y);\n\n    if (bound.row &lt; MIN_ROW_SELECTION_INDEX) {\n        bound.row = MIN_ROW_SELECTION_INDEX;\n    } else if (bound.row > this._tableBound.row) {\n        bound.row = this._tableBound.row;\n    }\n\n    if (bound.col &lt; MIN_COL_SELECTION_INDEX) {\n        bound.col = MIN_COL_SELECTION_INDEX;\n    } else if (bound.col > this._tableBound.col) {\n        bound.col = this._tableBound.col;\n    }\n\n    return bound;\n};\n\n/**\n * _setSelectionAreaByBound\n * Set selection area with bound\n * @param {number} col column index\n * @param {number} row row index\n */\nPopupAddTable.prototype._setSelectionAreaByBound = function(col, row) {\n    var boundOffset;\n\n    boundOffset = this._getOffsetByBound(col, row);\n    this._setSelectionArea(boundOffset.x, boundOffset.y);\n};\n\n\n/**\n * _setSelectedBound\n * Set selected bound\n * @param {number} col column index\n * @param {number} row row index\n */\nPopupAddTable.prototype._setSelectedBound = function(col, row) {\n    this._selectedBound.col = col;\n    this._selectedBound.row = row;\n};\n\n/**\n * _getSelectedTableSize\n * Get selected table size\n * @returns {object} bound\n */\nPopupAddTable.prototype._getSelectedTableSize = function() {\n    return {\n        row: this._selectedBound.row + 1,\n        col: this._selectedBound.col + 1\n    };\n};\n\n/**\n * _setDisplayText\n * Set selected table size text for display\n * @param {number} col column index\n * @param {number} row row index\n */\nPopupAddTable.prototype._setDisplayText = function(col, row) {\n    this.$desc.html((col + 1) + ' x ' + (row + 1));\n};\n\n/**\n * _setTableSize\n * Set table element size\n * @param {number} x offset\n * @param {number} y offset\n */\nPopupAddTable.prototype._setTableSize = function(x, y) {\n    x += LAST_BORDER;\n    y += LAST_BORDER;\n\n    this.$header.css({\n        height: CELL_HEIGHT,\n        width: x\n    });\n\n    this.$body.css({\n        height: y,\n        width: x\n    });\n\n    this.$el.css({\n        width: x + 30\n    });\n};\n\n/**\n * _setSelectionArea\n * Set selection element size\n * @param {number} x offset\n * @param {number} y offset\n */\nPopupAddTable.prototype._setSelectionArea = function(x, y) {\n    x += LAST_BORDER;\n    y += LAST_BORDER;\n\n    this.$selection.css({\n        height: y,\n        width: x\n    });\n};\n\nPopupAddTable.CELL_WIDTH = CELL_WIDTH;\nPopupAddTable.CELL_HEIGHT = CELL_HEIGHT;\nPopupAddTable.MIN_ROW_SELECTION_INDEX = MIN_ROW_SELECTION_INDEX;\nPopupAddTable.MIN_COL_SELECTION_INDEX = MIN_COL_SELECTION_INDEX;\n\nmodule.exports = PopupAddTable;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"