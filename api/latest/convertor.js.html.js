tui.util.defineNamespace("fedoc.content", {});
fedoc.content["convertor.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Convertor have responsible to convert markdown and html\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar markedCustomRenderer = require('./markedCustomRenderer');\n\nvar marked = window.marked,\n    toMark = window.toMark,\n    hljs = window.hljs;\n\n/**\n * Convertor\n * @exports Convertor\n * @constructor\n * @class Convertor\n * @param {EventManager} em EventManager instance\n */\nfunction Convertor(em) {\n    this.eventManager = em;\n}\n\n/**\n * _markdownToHtmlWithCodeHighlight\n * Convert markdown to html with Codehighlight\n * @private\n * @memberOf Convertor\n * @param {string} markdown markdown text\n * @returns {string} html text\n */\nConvertor.prototype._markdownToHtmlWithCodeHighlight = function(markdown) {\n    markdown = markdown.replace(/\\\\\\|/g, ':ESCAPE_VERTICAL_BAR:');\n\n    return marked(markdown, {\n        renderer: markedCustomRenderer,\n        gfm: true,\n        tables: true,\n        breaks: true,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n        highlight: function(code, type) {\n            return hljs.getLanguage(type) ? hljs.highlight(type, code).value : code;\n        }\n    }).replace(/:ESCAPE_VERTICAL_BAR:/g, '|');\n};\n\n/**\n * _markdownToHtml\n * Convert markdown to html\n * @private\n * @memberOf Convertor\n * @param {string} markdown markdown text\n * @returns {string} html text\n */\nConvertor.prototype._markdownToHtml = function(markdown) {\n    markdown = markdown.replace(/\\\\\\|/g, ':ESCAPE_VERTICAL_BAR:');\n\n    return marked(markdown, {\n        renderer: markedCustomRenderer,\n        gfm: true,\n        tables: true,\n        breaks: true,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false\n    }).replace(/:ESCAPE_VERTICAL_BAR:/g, '|');\n};\n\n/**\n * toHTMLWithCodeHightlight\n * Convert markdown to html with Codehighlight\n * emit convertorAfterMarkdownToHtmlConverted\n * @api\n * @memberOf Convertor\n * @param {string} markdown markdown text\n * @returns {string} html text\n */\nConvertor.prototype.toHTMLWithCodeHightlight = function(markdown) {\n    var html = this._markdownToHtmlWithCodeHighlight(markdown);\n    html = this.eventManager.emitReduce('convertorAfterMarkdownToHtmlConverted', html);\n\n    return this._sanitizeScript(html);\n};\n\n/**\n * toHTML\n * Convert markdown to html\n * emit convertorAfterMarkdownToHtmlConverted\n * @api\n * @memberOf Convertor\n * @param {string} markdown markdown text\n * @returns {string} html text\n */\nConvertor.prototype.toHTML = function(markdown) {\n    var html = this._markdownToHtml(markdown);\n    html = this.eventManager.emitReduce('convertorAfterMarkdownToHtmlConverted', html);\n\n    return this._sanitizeScript(html);\n};\n\n/**\n * toMarkdown\n * Convert html to markdown\n * emit convertorAfterHtmlToMarkdownConverted\n * @api\n * @memberOf Convertor\n * @param {string} html html text\n * @returns {string} markdown text\n */\nConvertor.prototype.toMarkdown = function(html) {\n    var markdown = toMark(html);\n    markdown = this.eventManager.emitReduce('convertorAfterHtmlToMarkdownConverted', markdown);\n\n    return markdown;\n};\n\n/**\n * _sanitizeScript\n * Sanitize script tag\n * @private\n * @memberOf Convertor\n * @param {string} html html text\n * @returns {string}\n */\nConvertor.prototype._sanitizeScript = function(html) {\n    html = html.replace(/&lt;script.*?>/g, '&amp;lt;script&amp;gt;');\n    html = html.replace(/&lt;\\/script>/g, '&amp;lt;/script&amp;gt;');\n\n    return html;\n};\n\n/**\n * factory\n * Convertor factory\n * @api\n * @memberOf Convertor\n * @param {EventManager} eventManager eventmanager\n * @returns {Convertor}\n */\nConvertor.factory = function(eventManager) {\n    return new Convertor(eventManager);\n};\n\nmodule.exports = Convertor;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"