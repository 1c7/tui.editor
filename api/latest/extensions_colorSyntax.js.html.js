tui.util.defineNamespace("fedoc.content", {});
fedoc.content["extensions_colorSyntax.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements Color syntax Extension\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar extManager = require('../extManager');\n\nvar colorSyntaxRx = /{color:(.+?)}(.*?){color}/g,\n    colorHtmlRx = /&lt;span (?:class=\"colour\" )?style=\"color:(.+?)\"(?: class=\"colour\")?>(.*?)/g,\n    colorHtmlCompleteRx = /&lt;span (?:class=\"colour\" )?style=\"color:(.+?)\"(?: class=\"colour\")?>(.*?)&lt;\\/span>/g,\n    decimalColorRx = /rgb\\((\\d+)[, ]+(\\d+)[, ]+(\\d+)\\)/g;\n\nvar RESET_COLOR = '#181818';\n\nextManager.defineExtension('colorSyntax', function(editor) {\n    var useCustomSyntax = false;\n\n    if (editor.options.colorSyntax) {\n        useCustomSyntax = !!editor.options.colorSyntax.useCustomSyntax;\n    }\n\n    editor.eventManager.listen('convertorAfterMarkdownToHtmlConverted', function(html) {\n        var replacement;\n\n        if (!useCustomSyntax) {\n            replacement = html;\n        } else {\n            replacement = html.replace(colorSyntaxRx, function(matched, p1, p2) {\n                return makeHTMLColorSyntax(p2, p1);\n            });\n        }\n\n        return replacement;\n    });\n\n    editor.eventManager.listen('convertorAfterHtmlToMarkdownConverted', function(markdown) {\n        var findRx = useCustomSyntax ? colorHtmlCompleteRx : colorHtmlRx;\n\n        return markdown.replace(findRx, function(founded, color, text) {\n            var replacement;\n\n            if (color.match(decimalColorRx)) {\n                color = changeDecColorToHex(color);\n            }\n\n            if (!useCustomSyntax) {\n                replacement = founded.replace(/ ?class=\"colour\" ?/g, ' ').replace(decimalColorRx, color);\n            } else {\n                replacement = makeCustomColorSyntax(text, color);\n            }\n\n            return replacement;\n        });\n    });\n\n    if (!editor.isViewOnly() &amp;&amp; editor.getUI().name === 'default') {\n        editor.addCommand('markdown', {\n            name: 'color',\n            exec: function(mde, color) {\n                var cm = mde.getEditor();\n\n                if (!useCustomSyntax) {\n                    cm.replaceSelection(makeHTMLColorSyntax(cm.getSelection(), color));\n                } else {\n                    cm.replaceSelection(makeCustomColorSyntax(cm.getSelection(), color));\n                }\n\n                mde.focus();\n            }\n        });\n\n        editor.addCommand('wysiwyg', {\n            name: 'color',\n            exec: function(wwe, color) {\n                var sq = wwe.getEditor();\n\n                if (!sq.hasFormat('PRE')) {\n                    if (color === RESET_COLOR) {\n                        sq.changeFormat(null, {\n                            class: 'colour',\n                            tag: 'span'\n                        });\n                    } else {\n                        sq.setTextColour(color);\n                    }\n                }\n\n                sq.focus();\n            }\n        });\n\n        initUI(editor);\n    }\n});\n\nfunction initUI(editor) {\n    var $colorPickerContainer, $button, colorPicker, popup, $buttonBar, selectedColor, className;\n\n    className = 'tui-color';\n\n    editor.eventManager.addEventType('colorButtonClicked');\n\n    editor.getUI().toolbar.addButton({\n        className: className,\n        event: 'colorButtonClicked',\n        tooltip: '글자색상'\n    }, 2);\n    $button = editor.getUI().toolbar.$el.find('button.' + className);\n\n    $colorPickerContainer = $('&lt;div />');\n\n    $buttonBar = $('&lt;div>&lt;button type=\"button\" class=\"te-apply-button\">입력&lt;/button>&lt;/div>');\n    $buttonBar.css('margin-top', 10);\n\n    colorPicker = tui.component.colorpicker.create({\n        container: $colorPickerContainer[0]\n    });\n\n    $colorPickerContainer.append($buttonBar);\n\n    popup = editor.getUI().createPopup({\n        title: false,\n        content: $colorPickerContainer,\n        $target: editor.getUI().$el,\n        css: {\n            'width': 178,\n            'position': 'absolute'\n        }\n    });\n\n    editor.eventManager.listen('focus', function() {\n        popup.hide();\n    });\n\n    editor.eventManager.listen('colorButtonClicked', function() {\n        editor.eventManager.emit('closeAllPopup');\n        if (popup.isShow()) {\n            popup.hide();\n        } else {\n            popup.$el.css({\n                'top': $button.position().top + $button.height() + 5,\n                'left': $button.position().left\n            });\n            popup.show();\n        }\n    });\n\n    editor.eventManager.listen('closeAllPopup', function() {\n        popup.hide();\n    });\n\n    editor.eventManager.listen('removeEditor', function() {\n        colorPicker.off('selectColor');\n    });\n\n    colorPicker.on('selectColor', function(e) {\n        selectedColor = e.color;\n\n        if (e.origin === 'palette') {\n            editor.exec('color', selectedColor);\n            popup.hide();\n        }\n    });\n\n    popup.$el.find('.te-apply-button').on('click', function() {\n        editor.exec('color', selectedColor);\n    });\n}\n\nfunction makeCustomColorSyntax(text, color) {\n    return '{color:' + color + '}' + text + '{color}';\n}\n\nfunction makeHTMLColorSyntax(text, color) {\n    return '&lt;span style=\"color:' + color + '\">' + text + '&lt;/span>';\n}\n\nfunction changeDecColorToHex(color) {\n    return color.replace(decimalColorRx, function(colorValue, r, g, b) {\n        r = parseInt(r, 10);\n        g = parseInt(g, 10);\n        b = parseInt(b, 10);\n\n        return '#' + get2DigitNumberString(r.toString(16))\n            + get2DigitNumberString(g.toString(16))\n            + get2DigitNumberString(b.toString(16));\n    });\n}\n\nfunction get2DigitNumberString(numberStr) {\n    return numberStr === '0' ? '00' : numberStr;\n}\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"