tui.util.defineNamespace("fedoc.content", {});
fedoc.content["wwHeadingManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements wysiwyg heading manager\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar domUtils = require('./domUtils');\n\nvar FIND_HEADING_RX = /h[\\d]/i;\n\n/**\n * WwHeadingManager\n * @exports WwHeadingManager\n * @constructor\n * @class WwHeadingManager\n * @param {WysiwygEditor} wwe WysiwygEditor instance\n */\nfunction WwHeadingManager(wwe) {\n    this.wwe = wwe;\n    this.eventManager = wwe.eventManager;\n\n    this._init();\n}\n\n/**\n * Name property\n * @api\n * @memberOf WwHeadingManager\n * @type {string}\n */\nWwHeadingManager.prototype.name = 'heading';\n\n/**\n * _init\n * Initialize\n * @memberOf WwHeadingManager\n * @private\n */\nWwHeadingManager.prototype._init = function() {\n    this._initKeyHandler();\n};\n\n/**\n * _initKeyHandler\n * Initialize key event handler\n * @memberOf WwHeadingManager\n * @private\n */\nWwHeadingManager.prototype._initKeyHandler = function() {\n    var self = this;\n\n    this.wwe.addKeyEventHandler('ENTER', function(ev, range) {\n        if (self.wwe.hasFormatWithRx(FIND_HEADING_RX)) {\n            self._onEnter(ev, range);\n\n            return false;\n        }\n\n        return true;\n    });\n\n    this.wwe.addKeyEventHandler('BACK_SPACE', function(ev, range) {\n        if (self.wwe.hasFormatWithRx(FIND_HEADING_RX)) {\n            self._removePrevTopNodeIfNeed(ev, range);\n\n            return false;\n        }\n\n        return true;\n    });\n};\n\n/**\n * _unwrapHeading\n * Unwrap heading\n * @memberOf WwHeadingManager\n * @private\n */\nWwHeadingManager.prototype._unwrapHeading = function() {\n    this.wwe.unwrapBlockTag(function(node) {\n        return FIND_HEADING_RX.test(node);\n    });\n};\n\n/**\n * _onEnter\n * Enter key handler\n * @memberOf WwHeadingManager\n * @param {Event} event event object\n * @param {Range} range range\n * @private\n */\nWwHeadingManager.prototype._onEnter = function(event, range) {\n    var self = this;\n\n    if (range.startOffset > 0) {\n        //squire의 처리 중간이나 마지막에 개입할 방법이 없어 지연 처리\n        this.wwe.defer(function(wwe) {\n            self._unwrapHeading();\n            wwe.getEditor().removeLastUndoStack();\n        });\n    } else {\n        event.preventDefault();\n        this._insertEmptyBlockToPrevious(range);\n    }\n};\n\n/**\n * _insertEmptyBlockToPrevious\n * Insert empty block to previous of passed range\n * @api\n * @memberOf WwHeadingManager\n * @param {Range} range range\n * @private\n */\nWwHeadingManager.prototype._insertEmptyBlockToPrevious = function(range) {\n    this.wwe.getEditor().saveUndoState(range);\n    $('&lt;div>&lt;br>&lt;/div>').insertBefore(domUtils.getParentUntil(range.startContainer, this.wwe.get$Body()[0]));\n};\n\n/**\n * _removePrevTopNodeIfNeed\n * Remove previous top node if need\n * @memberOf WwHeadingManager\n * @param {Event} event event object\n * @param {Range} range range\n * @returns {Boolean} whether needed or not\n * @private\n */\nWwHeadingManager.prototype._removePrevTopNodeIfNeed = function(event, range) {\n    var isHandled, prevTopNode;\n\n    if (range.collapsed) {\n        prevTopNode = domUtils.getTopPrevNodeUnder(range.startContainer, this.wwe.get$Body()[0]);\n\n        if (range.startOffset === 0\n            &amp;&amp; prevTopNode\n            &amp;&amp; !prevTopNode.textContent.length\n           ) {\n            event.preventDefault();\n            this.wwe.getEditor().saveUndoState(range);\n            $(prevTopNode).remove();\n            isHandled = true;\n        }\n    }\n\n    return isHandled;\n};\n\nmodule.exports = WwHeadingManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"