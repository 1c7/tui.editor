tui.util.defineNamespace("fedoc.content", {});
fedoc.content["editor.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar MarkdownEditor = require('./markdownEditor'),\n    Preview = require('./preview'),\n    WysiwygEditor = require('./wysiwygEditor'),\n    Layout = require('./layout'),\n    EventManager = require('./eventManager'),\n    CommandManager = require('./commandManager'),\n    extManager = require('./extManager'),\n    ImportManager = require('./importManager'),\n    Convertor = require('./convertor'),\n    ViewOnly = require('./viewOnly'),\n    markedRenderer = require('./markedCustomRenderer'),\n    DefaultUI = require('./ui/defaultUI');\n\n\n//markdown commands\nvar mdBold = require('./markdownCommands/bold'),\n    mdItalic = require('./markdownCommands/italic'),\n    mdStrike = require('./markdownCommands/strike'),\n    mdBlockquote = require('./markdownCommands/blockquote'),\n    mdHeading = require('./markdownCommands/heading'),\n    mdHR = require('./markdownCommands/hr'),\n    mdAddLink = require('./markdownCommands/addLink'),\n    mdAddImage = require('./markdownCommands/addImage'),\n    mdUL = require('./markdownCommands/ul'),\n    mdOL = require('./markdownCommands/ol'),\n    mdTable = require('./markdownCommands/table'),\n    mdTask = require('./markdownCommands/task'),\n    mdCode = require('./markdownCommands/code'),\n    mdCodeBlock = require('./markdownCommands/codeBlock');\n\n//wysiwyg Commands\nvar wwBold = require('./wysiwygCommands/bold'),\n    wwItalic = require('./wysiwygCommands/italic'),\n    wwStrike = require('./wysiwygCommands/strike'),\n    wwBlockquote = require('./wysiwygCommands/blockquote'),\n    wwAddImage = require('./wysiwygCommands/addImage'),\n    wwAddLink = require('./wysiwygCommands/addLink'),\n    wwHR = require('./wysiwygCommands/hr'),\n    wwHeading = require('./wysiwygCommands/heading'),\n    wwUL = require('./wysiwygCommands/ul'),\n    wwOL = require('./wysiwygCommands/ol'),\n    wwTable = require('./wysiwygCommands/table'),\n    wwTableAddRow = require('./wysiwygCommands/tableAddRow'),\n    wwTableAddCol = require('./wysiwygCommands/tableAddCol'),\n    wwTableRemoveRow = require('./wysiwygCommands/tableRemoveRow'),\n    wwTableRemoveCol = require('./wysiwygCommands/tableRemoveCol'),\n    wwTableRemove = require('./wysiwygCommands/tableRemove'),\n    wwIncreaseDepth = require('./wysiwygCommands/increaseDepth'),\n    wwDecreaseDepth = require('./wysiwygCommands/decreaseDepth'),\n    wwTask = require('./wysiwygCommands/task'),\n    wwCode = require('./wysiwygCommands/code'),\n    wwCodeBlock = require('./wysiwygCommands/codeBlock');\n\nvar util = tui.util;\n\nvar __nedInstance = [];\n\n/**\n * ToastUI Editor\n * @exports ToastUIEditor\n * @constructor\n * @class ToastUIEditor\n * @param {object} options Option object\n     * @param {number} options.height Editor's height (px)\n     * @param {string} options.initialValue Editor's initial value\n     * @param {string} options.previewStyle Markdown editor's preview style (tab, vertical)\n     * @param {string} options.initialEditType Initial editor type (markdown, wysiwyg)\n     * @param {object} options.events eventlist Event list\n         * @param {function} options.events.load It would be emitted when editor fully load\n         * @param {function} options.events.change It would be emitted when content changed\n         * @param {function} options.events.stateChange It would be emitted when format change by cursor position\n         * @param {function} options.events.focus It would be emitted when editor get focus\n         * @param {function} options.events.blur It would be emitted when editor loose focus\n     * @param {object} options.hooks Hook list\n         * @param {function} options.hooks.previewBeforeHook Submit preview to hook URL before preview be shown\n         * @param {function} options.hooks.addImageBlobHook hook for image upload.\n */\nfunction ToastUIEditor(options) {\n    var self = this;\n\n    this.options = $.extend({\n        'previewStyle': 'tab',\n        'initialEditType': 'markdown',\n        'height': 300\n    }, options);\n\n    this.eventManager = new EventManager();\n\n    this.importManager = new ImportManager(this.eventManager);\n\n    this.commandManager = new CommandManager(this);\n    this.convertor = new Convertor(this.eventManager);\n\n    if (this.options.hooks) {\n        util.forEach(this.options.hooks, function(fn, key) {\n            self.addHook(key, fn);\n        });\n    }\n\n    if (this.options.events) {\n        util.forEach(this.options.events, function(fn, key) {\n            self.on(key, fn);\n        });\n    }\n\n    this.layout = new Layout(options, this.eventManager);\n\n    this.setUI(this.options.UI || new DefaultUI(this));\n\n    this.mdEditor = new MarkdownEditor(this.layout.getMdEditorContainerEl(), this.eventManager);\n    this.preview = new Preview(this.layout.getPreviewEl(), this.eventManager, this.convertor);\n    this.wwEditor = WysiwygEditor.factory(this.layout.getWwEditorContainerEl(), this.eventManager);\n\n    this.changePreviewStyle(this.options.previewStyle);\n\n    this.mdEditor.init();\n\n    this.changeMode(self.options.initialEditType);\n\n    this.contentHeight(self.options.height);\n\n    this.setValue(self.options.initialValue);\n\n    extManager.applyExtension(self, self.options.exts);\n\n    this.eventManager.emit('load', self);\n\n    __nedInstance.push(this);\n}\n\n/**\n * 프리뷰가 보여지는 방식을 변경한다\n * @api\n * @memberOf ToastUIEditor\n * @param {string} style 스타일 이름 tab, vertical\n */\nToastUIEditor.prototype.changePreviewStyle = function(style) {\n    this.layout.changePreviewStyle(style);\n    this.mdPreviewStyle = style;\n    this.eventManager.emit('changePreviewStyle', style);\n};\n\n/**\n * call commandManager's exec method\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.exec = function() {\n    this.commandManager.exec.apply(this.commandManager, arguments);\n};\n\nToastUIEditor.prototype.addCommand = function(type, props) {\n    if (!props) {\n        this.commandManager.addCommand(type);\n    } else {\n        this.commandManager.addCommand(CommandManager.command(type, props));\n    }\n};\n\n/**\n * Bind eventHandler to event type\n * @api\n * @memberOf ToastUIEditor\n * @param {string} type Event type\n * @param {function} handler Event handler\n */\nToastUIEditor.prototype.on = function(type, handler) {\n    this.eventManager.listen(type, handler);\n};\n\n/**\n * Unbind eventHandler from event type\n * @api\n * @memberOf ToastUIEditor\n * @param {string} type Event type\n */\nToastUIEditor.prototype.off = function(type) {\n    this.eventManager.removeEventHandler(type);\n};\n\n/**\n * Add hook to TUIEditor event\n * @api\n * @memberOf ToastUIEditor\n * @param {string} type Event type\n * @param {function} handler Event handler\n */\nToastUIEditor.prototype.addHook = function(type, handler) {\n    this.eventManager.removeEventHandler(type);\n    this.eventManager.listen(type, handler);\n};\n\n/**\n * Remove hook from TUIEditor event\n * @api\n * @memberOf ToastUIEditor\n * @param {string} type Event type\n */\nToastUIEditor.prototype.removeHook = function(type) {\n    this.eventManager.removeEventHandler(type);\n};\n\n/**\n * Get CodeMirror instance\n * @api\n * @memberOf ToastUIEditor\n * @returns {CodeMirror}\n */\nToastUIEditor.prototype.getCodeMirror = function() {\n    return this.mdEditor.getEditor();\n};\n\n/**\n * Get SquireExt instance\n * @api\n * @memberOf ToastUIEditor\n * @returns {SquireExt}\n */\nToastUIEditor.prototype.getSquire = function() {\n    return this.wwEditor.getEditor();\n};\n\n/**\n * Set focus to current Editor\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.focus = function() {\n    this.getCurrentModeEditor().focus();\n};\n\n/**\n * Set cursor position to end\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.moveCursorToEnd = function() {\n    this.getCurrentModeEditor().moveCursorToEnd();\n};\n\n/**\n * Set cursor position to start\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.moveCursorToStart = function() {\n    this.getCurrentModeEditor().moveCursorToStart();\n};\n\n/**\n * Set Editor value\n * @api\n * @memberOf ToastUIEditor\n * @param {string} markdown Markdown syntax text\n */\nToastUIEditor.prototype.setValue = function(markdown) {\n    markdown = markdown || '';\n\n    if (this.isMarkdownMode()) {\n        this.mdEditor.setValue(markdown);\n    } else {\n        this.wwEditor.setValue(this.convertor.toHTML(markdown));\n    }\n\n    this.eventManager.emit('setValueAfter', markdown);\n};\n\n/**\n * Get editor value\n * @api\n * @memberOf ToastUIEditor\n * @returns {string}\n */\nToastUIEditor.prototype.getValue = function() {\n    var markdown;\n\n    if (this.isMarkdownMode()) {\n        markdown = this.mdEditor.getValue();\n    } else {\n        markdown = this.convertor.toMarkdown(this.wwEditor.getValue());\n    }\n\n    return markdown;\n};\n\n/**\n * Add widget to selection\n * @api\n * @memberOf ToastUIEditor\n * @param {Range} selection Current selection\n * @param {Node} node widget node\n * @param {string} style Adding style \"over\" or \"bottom\"\n * @param {number} [offset] Offset for adjust position\n */\nToastUIEditor.prototype.addWidget = function(selection, node, style, offset) {\n    this.getCurrentModeEditor().addWidget(selection, node, style, offset);\n};\n\n/**\n * Set and return content area height\n * @api\n * @memberOf ToastUIEditor\n * @param {number} height Content area height\n * @returns {number}\n */\nToastUIEditor.prototype.contentHeight = function(height) {\n    if (height) {\n        this._contentHeight = height;\n        this.mdEditor.setHeight(height);\n        this.preview.setHeight(height);\n        this.wwEditor.setHeight(height);\n    }\n\n    return this._contentHeight;\n};\n\n/**\n * Get current editor mode name\n * @api\n * @memberOf ToastUIEditor\n * @returns {string}\n */\nToastUIEditor.prototype.getCurrentModeEditor = function() {\n    var editor;\n\n    if (this.isMarkdownMode()) {\n        editor = this.mdEditor;\n    } else {\n        editor = this.wwEditor;\n    }\n\n    return editor;\n};\n\n/**\n * Return true if current editor mode is Markdown\n * @api\n * @memberOf ToastUIEditor\n * @returns {boolean}\n */\nToastUIEditor.prototype.isMarkdownMode = function() {\n    return this.currentMode === 'markdown';\n};\n\n/**\n * Return true if current editor mode is WYSIWYG\n * @api\n * @memberOf ToastUIEditor\n * @returns {boolean}\n */\nToastUIEditor.prototype.isWysiwygMode = function() {\n    return this.currentMode === 'wysiwyg';\n};\n\n/**\n * Return false\n * @api\n * @memberOf ToastUIEditor\n * @returns {boolean}\n */\nToastUIEditor.prototype.isViewOnly = function() {\n    return false;\n};\n\n/**\n * Get current Markdown editor's preview style\n * @api\n * @memberOf ToastUIEditor\n * @returns {string}\n */\nToastUIEditor.prototype.getCurrentPreviewStyle = function() {\n    return this.mdPreviewStyle;\n};\n\n/**\n * Change editor's mode to given mode string\n * @api\n * @memberOf ToastUIEditor\n * @param {string} mode Editor mode name of want to change\n */\nToastUIEditor.prototype.changeMode = function(mode) {\n    if (this.currentMode === mode) {\n        return;\n    }\n\n    this.currentMode = mode;\n\n    if (this.isWysiwygMode()) {\n        this.layout.switchToWYSIWYG();\n        this.wwEditor.setValue(this.convertor.toHTML(this.mdEditor.getValue()));\n        this.eventManager.emit('changeModeToWysiwyg');\n    } else {\n        this.layout.switchToMarkdown();\n        this.mdEditor.setValue(this.convertor.toMarkdown(this.wwEditor.getValue()));\n        this.getCodeMirror().refresh();\n        this.eventManager.emit('changeModeToMarkdown');\n    }\n\n    this.eventManager.emit('changeMode', mode);\n\n    this.focus();\n};\n\n/**\n * Remove TUIEditor from document\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.remove = function() {\n    var self = this;\n    var i = __nedInstance.length - 1;\n    this.wwEditor.remove();\n    this.mdEditor.remove();\n    this.layout.remove();\n\n    if (this.getUI()) {\n        this.getUI().remove();\n    }\n\n    this.eventManager.emit('removeEditor');\n    this.eventManager.events.forEach(function(value, key) {\n        self.off(key);\n    });\n    this.eventManager = null;\n\n    for (; i >= 0; i -= 1) {\n        if (__nedInstance[i] === this) {\n            __nedInstance.splice(i, 1);\n        }\n    }\n};\n\n/**\n * Hide TUIEditor\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.hide = function() {\n    this.eventManager.emit('hide', this);\n};\n\n/**\n * Show TUIEditor\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.show = function() {\n    this.eventManager.emit('show', this);\n    this.getCodeMirror().refresh();\n};\n\n/**\n * Scroll Editor content to Top\n * @api\n * @memberOf ToastUIEditor\n * @param {number} value Scroll amount\n * @returns {number}\n */\nToastUIEditor.prototype.scrollTop = function(value) {\n    return this.getCurrentModeEditor().scrollTop(value);\n};\n\n/**\n * Set UI to private UI property\n * @api\n * @memberOf ToastUIEditor\n * @param {UI} UI UI instance\n */\nToastUIEditor.prototype.setUI = function(UI) {\n    this._ui = UI;\n};\n\n/**\n * Get _ui property\n * @api\n * @memberOf ToastUIEditor\n * @returns {UI}\n */\nToastUIEditor.prototype.getUI = function() {\n    return this._ui;\n};\n\n/**\n * Reset TUIEditor\n * @api\n * @memberOf ToastUIEditor\n */\nToastUIEditor.prototype.reset = function() {\n    this.wwEditor.reset();\n    this.mdEditor.reset();\n};\n\n/**\n * Get current range\n * @api\n * @memberOf ToastUIEditor\n * @returns {{start, end}|Range}\n */\nToastUIEditor.prototype.getRange = function() {\n    return this.getCurrentModeEditor().getRange();\n};\n\n/**\n * Get text object of current range\n * @api\n * @memberOf ToastUIEditor\n * @param {{start, end}|Range} range Range object of each editor\n * @returns {object} TextObject class\n */\nToastUIEditor.prototype.getTextObject = function(range) {\n    return this.getCurrentModeEditor().getTextObject(range);\n};\n\n/**\n * Get instance of TUIEditor\n * @api\n * @memberOf ToastUIEditor\n * @returns {Array}\n */\nToastUIEditor.getInstances = function() {\n    return __nedInstance;\n};\n\n/**\n * Define extension\n * @api\n * @memberOf ToastUIEditor\n * @param {string} name Extension name\n * @param {ExtManager~extension} ext extension\n */\nToastUIEditor.defineExtension = function(name, ext) {\n    extManager.defineExtension(name, ext);\n};\n\n/**\n * Factory method for Editor\n * @api\n * @memberOf ToastUIEditor\n * @param {object} options Option for initialize TUIEditor\n * @returns {ToastUIEditor}\n */\nToastUIEditor.factory = function(options) {\n    var tuiEditor;\n\n    if (options.viewOnly) {\n        tuiEditor = new ViewOnly(options);\n    } else {\n        tuiEditor = new ToastUIEditor(options);\n\n        tuiEditor.addCommand(mdBold);\n        tuiEditor.addCommand(mdItalic);\n        tuiEditor.addCommand(mdBlockquote);\n        tuiEditor.addCommand(mdHeading);\n        tuiEditor.addCommand(mdHR);\n        tuiEditor.addCommand(mdAddLink);\n        tuiEditor.addCommand(mdAddImage);\n        tuiEditor.addCommand(mdUL);\n        tuiEditor.addCommand(mdOL);\n        tuiEditor.addCommand(mdTable);\n        tuiEditor.addCommand(mdTask);\n        tuiEditor.addCommand(mdCode);\n        tuiEditor.addCommand(mdCodeBlock);\n        tuiEditor.addCommand(mdStrike);\n\n        tuiEditor.addCommand(wwBold);\n        tuiEditor.addCommand(wwItalic);\n        tuiEditor.addCommand(wwBlockquote);\n        tuiEditor.addCommand(wwUL);\n        tuiEditor.addCommand(wwOL);\n        tuiEditor.addCommand(wwAddImage);\n        tuiEditor.addCommand(wwAddLink);\n        tuiEditor.addCommand(wwHR);\n        tuiEditor.addCommand(wwHeading);\n        tuiEditor.addCommand(wwIncreaseDepth);\n        tuiEditor.addCommand(wwDecreaseDepth);\n        tuiEditor.addCommand(wwTask);\n        tuiEditor.addCommand(wwTable);\n        tuiEditor.addCommand(wwTableAddRow);\n        tuiEditor.addCommand(wwTableAddCol);\n        tuiEditor.addCommand(wwTableRemoveRow);\n        tuiEditor.addCommand(wwTableRemoveCol);\n        tuiEditor.addCommand(wwTableRemove);\n        tuiEditor.addCommand(wwCode);\n        tuiEditor.addCommand(wwCodeBlock);\n        tuiEditor.addCommand(wwStrike);\n    }\n\n    return tuiEditor;\n};\n\n/**\n * Marked renderer\n * @api\n * @memberOf ToastUIEditor\n * @type {marked.renderer}\n */\nToastUIEditor.markedRenderer = markedRenderer;\n\nmodule.exports = ToastUIEditor;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"