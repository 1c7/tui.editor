tui.util.defineNamespace("fedoc.content", {});
fedoc.content["markdownItPlugins_markdownitTaskPlugin.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>// Copyright (c) 2016, Revin Guillen.\n// Distributed under an MIT license: https://github.com/revin/markdown-it-task-lists/\n\n/**\n * @fileoverview Implements markdownitTaskPlugin\n * @modifier Sungho Kim(sungho-kim@nhnent.com) FE Development Lab/NHN Ent.\n * @modifier Junghwan Park(junghwan.park@nhnent.com) FE Development Lab/NHN Ent.\n */\n/* eslint-disable */\n\n/**\n * Task list renderer for Markdown-it\n * @param {object} markdownit Markdown-it instance\n */\nvar MarkdownitTaskRenderer = function(markdownit) {\n    markdownit.core.ruler.after('inline', 'tui-task-list', function(state) {\n        var TASK_LIST_ITEM_CLASS_NAME = 'task-list-item';\n        var CHECKED_CLASS_NAME = 'checked';\n        var tokens = state.tokens;\n        var className;\n        var tokenIndex;\n\n        // tokenIndex=0 'ul', tokenIndex=1 'li', tokenIndex=2 'p_open'\n        for (tokenIndex = 2; tokenIndex &lt; tokens.length; tokenIndex += 1) {\n            if (isTaskListItemToken(tokens, tokenIndex)) {\n                if (isChecked(tokens[tokenIndex])) {\n                    className = TASK_LIST_ITEM_CLASS_NAME + ' ' + CHECKED_CLASS_NAME;\n                } else {\n                    className = TASK_LIST_ITEM_CLASS_NAME;\n                }\n\n                removeMarkdownTaskFormatText(tokens[tokenIndex]);\n\n                setTokenAttribute(tokens[tokenIndex - 2], 'class', className);\n                setTokenAttribute(tokens[tokenIndex - 2], 'data-te-task', '');\n            }\n        }\n    });\n};\n\n/**\n * Remove task format text for rendering\n * @param {object} token Token object\n */\nfunction removeMarkdownTaskFormatText(token) {\n    // '[X] ' length is 4\n    // FIXED: we don't need first space\n    token.content = token.content.slice(4);\n    token.children[0].content = token.children[0].content.slice(4);\n}\n\n/**\n * Return boolean value whether task checked or not\n * @param {object} token Token object\n * @returns {boolean}\n */\nfunction isChecked(token) {\n    var checked = false;\n\n    if (token.content.indexOf('[x]') === 0 || token.content.indexOf('[X]') === 0) {\n        checked = true;\n    }\n\n    return checked;\n}\n\n/**\n * Set attribute of passed token\n * @param {object} token Token object\n * @param {string} attributeName Attribute name for set\n * @param {string} attributeValue Attribute value for set\n */\nfunction setTokenAttribute(token, attributeName, attributeValue) {\n    var index = token.attrIndex(attributeName);\n    var attr = [attributeName, attributeValue];\n\n    if (index &lt; 0) {\n        token.attrPush(attr);\n    } else {\n        token.attrs[index] = attr;\n    }\n}\n\n/**\n * Return boolean value whether task list item or not\n * @param {array} tokens Token object\n * @param {number} index Number of token index\n * @returns {boolean}\n */\nfunction isTaskListItemToken(tokens, index) {\n    return tokens[index].type === 'inline'\n        &amp;&amp; tokens[index - 1].type === 'paragraph_open'\n        &amp;&amp; tokens[index - 2].type === 'list_item_open'\n        &amp;&amp; (tokens[index].content.indexOf('[ ]') === 0\n            || tokens[index].content.indexOf('[x]') === 0\n            || tokens[index].content.indexOf('[X]') === 0);\n}\n/* eslint-enable */\n\n\nmodule.exports = MarkdownitTaskRenderer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"