tui.util.defineNamespace("fedoc.content", {});
fedoc.content["ui_defaultUI.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar Toolbar = require('./toolbar'),\n    Tab = require('./tab'),\n    Layerpopup = require('./layerpopup'),\n    ModeSwitch = require('./modeSwitch'),\n    PopupAddLink = require('./popupAddLink'),\n    PopupAddImage = require('./popupAddImage'),\n    PopupTableUtils = require('./popupTableUtils'),\n    PopupAddTable = require('./popupAddTable'),\n    PopupAddHeading = require('./popupAddHeading');\n\n/* eslint-disable indent */\nvar containerTmpl = [\n    '&lt;div class=\"tui-editor-defaultUI\">',\n        '&lt;div class=\"te-toolbar-section\">&lt;/div>',\n        '&lt;div class=\"te-markdown-tab-section\">&lt;/div>',\n        '&lt;div class=\"te-editor-section\">&lt;/div>',\n        '&lt;div class=\"te-mode-switch-section\">&lt;/div>',\n    '&lt;/div>'\n].join('');\n/* eslint-enable indent */\n\n/**\n * DefaultUI\n * @exports DefaultUI\n * @extends {}\n * @constructor\n * @class\n * @param {ToastUIEditor} editor editor\n */\nfunction DefaultUI(editor) {\n    this.name = 'default';\n\n    this.type = editor.options.initialEditType;\n    this.editor = editor;\n\n    this.init(editor.options.el);\n    this._initEvent();\n}\n\nDefaultUI.prototype.init = function($container) {\n    this._renderLayout($container);\n\n    this._initEditorSection();\n\n    this._initToolbar();\n    this._initModeSwitch();\n\n    this._initPopupAddLink();\n    this._initPopupAddImage();\n    this._initPopupAddTable();\n    this._initPopupAddHeading();\n    this._initPopupTableUtils();\n\n    this._initMarkdownTab();\n};\n\nDefaultUI.prototype._initEditorSection = function() {\n    this.$el.find('.te-editor-section').append(this.editor.layout.getEditorEl());\n};\n\nDefaultUI.prototype._initEvent = function() {\n    var self = this;\n\n    this.editor.eventManager.listen('hide', this.hide.bind(this));\n    this.editor.eventManager.listen('show', this.show.bind(this));\n    this.editor.eventManager.listen('changeMode', function() {\n        self.markdownTabControl();\n    });\n\n    this.editor.eventManager.listen('changePreviewStyle', function() {\n        self.markdownTabControl();\n    });\n};\n\nDefaultUI.prototype._renderLayout = function($container) {\n    this.$el = $(containerTmpl).appendTo($container);\n};\n\nDefaultUI.prototype._initToolbar = function() {\n    this.toolbar = new Toolbar(this.editor.eventManager);\n    this.$el.find('.te-toolbar-section').append(this.toolbar.$el);\n};\n\nDefaultUI.prototype._initModeSwitch = function() {\n    var self = this;\n\n    this.modeSwitch = new ModeSwitch(this.type === 'markdown' ? ModeSwitch.TYPE.MARKDOWN : ModeSwitch.TYPE.WYSIWYG);\n    this.$el.find('.te-mode-switch-section').append(this.modeSwitch.$el);\n\n    this.modeSwitch.on('modeSwitched', function(ev, type) {\n        self.editor.changeMode(type);\n    });\n};\n\nDefaultUI.prototype.markdownTabControl = function() {\n    if (this.editor.isMarkdownMode() &amp;&amp; this.editor.getCurrentPreviewStyle() === 'tab') {\n        this.$el.find('.te-markdown-tab-section').show();\n        this.markdownTab.activate('Editor');\n    } else {\n        this.$el.find('.te-markdown-tab-section').hide();\n    }\n};\n\nDefaultUI.prototype._initMarkdownTab = function() {\n    this.markdownTab = new Tab({\n        items: ['Editor', 'Preview'],\n        sections: [this.editor.layout.getMdEditorContainerEl(), this.editor.layout.getPreviewEl()]\n    });\n\n    this.$el.find('.te-markdown-tab-section').append(this.markdownTab.$el);\n};\n\nDefaultUI.prototype._initPopupAddLink = function() {\n    this.popupAddLink = new PopupAddLink({\n        $target: this.$el,\n        eventManager: this.editor.eventManager\n    });\n};\n\nDefaultUI.prototype._initPopupAddImage = function() {\n    this.popupAddImage = new PopupAddImage({\n        $target: this.$el,\n        eventManager: this.editor.eventManager\n    });\n};\n\nDefaultUI.prototype._initPopupAddTable = function() {\n    this.popupAddTable = new PopupAddTable({\n        $target: this.$el,\n        eventManager: this.editor.eventManager,\n        $button: this.$el.find('button.tui-table'),\n        css: {\n            'position': 'absolute'\n        }\n    });\n};\n\nDefaultUI.prototype._initPopupAddHeading = function() {\n    this.popupAddHeading = new PopupAddHeading({\n        $target: this.$el,\n        eventManager: this.editor.eventManager,\n        $button: this.$el.find('button.tui-heading'),\n        css: {\n            'position': 'absolute'\n        }\n    });\n};\n\nDefaultUI.prototype._initPopupTableUtils = function() {\n    var self = this;\n\n    this.editor.eventManager.listen('contextmenu', function(ev) {\n        if ($(ev.data.target).parents('table').length > 0) {\n            ev.data.preventDefault();\n            self.editor.eventManager.emit('openPopupTableUtils', ev.data);\n        }\n    });\n\n    this.popupTableUtils = new PopupTableUtils({\n        $target: this.$el,\n        eventManager: this.editor.eventManager\n    });\n};\n\nDefaultUI.prototype.hide = function() {\n    this.$el.addClass('te-hide');\n};\n\nDefaultUI.prototype.show = function() {\n    this.$el.removeClass('te-hide');\n};\n\nDefaultUI.prototype.remove = function() {\n    this.$el.remove();\n};\n\nDefaultUI.prototype.createPopup = function(options) {\n    return Layerpopup.factory(options);\n};\n\nmodule.exports = DefaultUI;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"