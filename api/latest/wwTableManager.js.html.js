tui.util.defineNamespace("fedoc.content", {});
fedoc.content["wwTableManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements wysiwyg table manager\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar domUtils = require('./domUtils');\n\n/**\n * WwTableManager\n * @exports WwTableManager\n * @constructor\n * @class WwTableManager\n * @param {WysiwygEditor} wwe WysiwygEditor instance\n */\nfunction WwTableManager(wwe) {\n    this.wwe = wwe;\n    this.eventManager = wwe.eventManager;\n\n    this._lastCellNode = null;\n    this._init();\n}\n\n/**\n * Name property\n * @api\n * @memberOf WwTableManager\n * @type {string}\n */\nWwTableManager.prototype.name = 'table';\n\n/**\n * _init\n * Initialize\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._init = function() {\n    this._initKeyHandler();\n    this._initEvent();\n};\n\n/**\n * _initEvent\n * Initialize event\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._initEvent = function() {\n    var self = this;\n\n    this.eventManager.listen('wysiwygRangeChangeAfter', function() {\n        self._unwrapBlockInTable();\n    });\n\n    this.eventManager.listen('wysiwygSetValueAfter', function() {\n        self._unwrapBlockInTable();\n    });\n\n    this.eventManager.listen('wysiwygProcessHTMLText', function(html) {\n        //remove last br in td or th\n        return html.replace(/&lt;br \\/>(&lt;\\/td>|&lt;\\/th>)/g, '$1');\n    });\n};\n\n/**\n * _initKeyHandler\n * Initialize key event handler\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._initKeyHandler = function() {\n    var self = this;\n\n    this.wwe.addKeyEventHandler(function(ev, range) {\n        if (self._isInTable(range)) {\n            self._recordUndoStateIfNeed(range);\n        } else if (self._lastCellNode) {\n            self._recordUndoStateAndResetCellNode(range);\n        }\n    });\n\n    this.wwe.addKeyEventHandler('ENTER', function(ev, range) {\n        var isNeedNext;\n\n        if (self._isAfterTable(range)) {\n            ev.preventDefault();\n            range.setStart(range.startContainer, range.startOffset - 1);\n            self.wwe.breakToNewDefaultBlock(range);\n            isNeedNext = false;\n        } else if (self._isBeforeTable(range)) {\n            ev.preventDefault();\n            self.wwe.breakToNewDefaultBlock(range, 'before');\n            isNeedNext = false;\n        } else if (self._isInTable(range)) {\n            self._appendBrIfTdOrThNotHaveAsLastChild(range);\n            isNeedNext = false;\n        }\n\n        return isNeedNext;\n    });\n\n    this.wwe.addKeyEventHandler('BACK_SPACE', function(ev, range) {\n        var isNeedNext;\n\n        if (range.collapsed) {\n            if (self._isInTable(range)) {\n                self._tableHandlerOnBackspace(range, ev);\n                isNeedNext = false;\n            } else if (self._isAfterTable(range)) {\n                ev.preventDefault();\n                self._removeTableOnBackspace(range);\n                isNeedNext = false;\n            }\n        }\n\n        return isNeedNext;\n    });\n};\n\n/**\n * _isInTable\n * Check whether passed range is in table or not\n * @param {Range} range range\n * @returns {boolean} result\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._isInTable = function(range) {\n    var target;\n\n    if (range.collapsed) {\n        target = range.startContainer;\n    } else {\n        target = range.commonAncestorContainer;\n    }\n\n    return !!$(target).closest('table').length;\n};\n\n/**\n * _isBeforeTable\n * Check whether passed range is right before table or not\n * @param {Range} range range\n * @returns {boolean} result\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._isBeforeTable = function(range) {\n    return domUtils.getNodeName(domUtils.getChildNodeByOffset(range.startContainer, range.startOffset)) === 'TABLE';\n};\n\n/**\n * _isAfterTable\n * Check whether passed range is right after table or not\n * @param {Range} range range\n * @returns {boolean} result\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._isAfterTable = function(range) {\n    var prevElem = domUtils.getPrevOffsetNodeUntil(range.startContainer, range.startOffset);\n\n    return domUtils.getNodeName(prevElem) === 'TABLE'\n\t&amp;&amp; range.commonAncestorContainer === this.wwe.get$Body()[0];\n};\n\n/**\n * _tableHandlerOnBackspace\n * Backspace handler in table\n * @param {Range} range range\n * @param {Event} event event\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._tableHandlerOnBackspace = function(range, event) {\n    var prevNode = domUtils.getPrevOffsetNodeUntil(range.startContainer, range.startOffset, 'TR'),\n        prevNodeName = domUtils.getNodeName(prevNode);\n\n    if (!prevNode || prevNodeName === 'TD' || prevNodeName === 'TH') {\n        event.preventDefault();\n    } else if (prevNodeName === 'BR' &amp;&amp; prevNode.parentNode.childNodes.length !== 1) {\n        event.preventDefault();\n        $(prevNode).remove();\n    }\n};\n\n/**\n * _appendBrIfTdOrThNotHaveAsLastChild\n * Append br if td or th doesn't have br as last child\n * @param {Range} range range\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._appendBrIfTdOrThNotHaveAsLastChild = function(range) {\n    var paths, tdOrTh, startContainerNodeName;\n\n    startContainerNodeName = domUtils.getNodeName(range.startContainer);\n\n    if (startContainerNodeName === 'TD' || startContainerNodeName === 'TH') {\n        tdOrTh = range.startContainer;\n    } else {\n        paths = $(range.startContainer).parentsUntil('tr');\n        tdOrTh = paths[paths.length - 1];\n    }\n\n    if (domUtils.getNodeName(tdOrTh.lastChild) !== 'BR' &amp;&amp; domUtils.getNodeName(tdOrTh.lastChild) !== 'DIV') {\n        $(tdOrTh).append('&lt;br>');\n    }\n};\n\n/**\n * _unwrapBlockInTable\n * Unwrap default block tag in table\n * For Squire default action making abnormal behavior, remove default blocks in Table after setValue() called\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._unwrapBlockInTable = function() {\n    this.wwe.get$Body().find('td div, th div').each(function(index, node) {\n        $(node).children().unwrap();\n    });\n};\n\n/**\n * _removeTableOnBackspace\n * Remove table on backspace\n * @param {Range} range range\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._removeTableOnBackspace = function(range) {\n    var table = domUtils.getPrevOffsetNodeUntil(range.startContainer, range.startOffset);\n\n    this.wwe.getEditor().saveUndoState(range);\n\n    this.wwe.insertSelectionMarker(range);\n    $(table).remove();\n    this.wwe.restoreSelectionMarker();\n};\n\n/**\n * _recordUndoStateIfNeed\n * record undo state if need\n * @param {Range} range range\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._recordUndoStateIfNeed = function(range) {\n    var currentCellNode = domUtils.getParentUntil(range.startContainer, 'TR');\n\n    if (range.collapsed &amp;&amp; this._lastCellNode !== currentCellNode) {\n        this.wwe.getEditor().saveUndoState(range);\n        this._lastCellNode = currentCellNode;\n    }\n};\n\n/**\n * _recordUndoStateAndResetCellNode\n * record undo state and reset last cell node\n * @param {Range} range range\n * @memberOf WwTableManager\n * @private\n */\nWwTableManager.prototype._recordUndoStateAndResetCellNode = function(range) {\n    this.wwe.getEditor().saveUndoState(range);\n    this._lastCellNode = null;\n};\n\nmodule.exports = WwTableManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"