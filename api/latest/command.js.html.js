tui.util.defineNamespace("fedoc.content", {});
fedoc.content["command.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements Command\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar util = tui.util;\n\n/**\n * Command\n * It implements command to editors\n * @exports Command\n * @class Command\n * @param {string} name Command name\n * @param {number} type Command type (Command.TYPE)\n * @param {Array.&lt;string>} [keyMap] keyMap\n */\nfunction Command(name, type, keyMap) {\n    this.name = name;\n    this.type = type;\n\n    if (keyMap) {\n        this.setKeyMap(keyMap);\n    }\n}\n\n/**\n * getName\n * returns Name of command\n * @api\n * @memberOf Command\n * @returns {string} Command Name\n */\nCommand.prototype.getName = function() {\n    return this.name;\n};\n\n/**\n * getType\n * returns Type of command\n * @api\n * @memberOf Command\n * @returns {number} Command Command type number\n */\nCommand.prototype.getType = function() {\n    return this.type;\n};\n\n/**\n * isMDType\n * returns whether Command Type is Markdown or not\n * @api\n * @memberOf Command\n * @returns {boolean} result\n */\nCommand.prototype.isMDType = function() {\n    return this.type === Command.TYPE.MD;\n};\n\n/**\n * isWWType\n * returns whether Command Type is Wysiwyg or not\n * @api\n * @memberOf Command\n * @returns {boolean} result\n */\nCommand.prototype.isWWType = function() {\n    return this.type === Command.TYPE.WW;\n};\n\n/**\n * isGlobalType\n * returns whether Command Type is Global or not\n * @api\n * @memberOf Command\n * @returns {boolean} result\n */\nCommand.prototype.isGlobalType = function() {\n    return this.type === Command.TYPE.GB;\n};\n\n/**\n * setKeyMap\n * Set keymap value for each os\n * @api\n * @memberOf Command\n * @param {string} win Windows Key(and etc)\n * @param {string} mac Mac osx key\n */\nCommand.prototype.setKeyMap = function(win, mac) {\n    this.keyMap = [win, mac];\n};\n\n/**\n * Command factory method\n * @api\n * @memberOf Command\n * @param {string} typeStr Editor type name\n * @param {object} props Property\n *     @param {string} props.name Command name\n *     @param {number} props.type Command type number\n * @returns {Command}\n */\nCommand.factory = function(typeStr, props) {\n    var command, type;\n\n    if (typeStr === 'markdown') {\n        type = Command.TYPE.MD;\n    } else if (typeStr === 'wysiwyg') {\n        type = Command.TYPE.WW;\n    } else if (typeStr === 'global') {\n        type = Command.TYPE.GB;\n    }\n\n    command = new Command(props.name, type);\n\n    util.extend(command, props);\n\n    return command;\n};\n\n/**\n * Command Type Constant\n * markdown : 0\n * wysiwyg : 1\n * global : 2\n * @api\n * @memberOf Command\n * @type {object}\n */\nCommand.TYPE = {\n    MD: 0,\n    WW: 1,\n    GB: 2\n};\n\nmodule.exports = Command;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"