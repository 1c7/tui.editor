tui.util.defineNamespace("fedoc.content", {});
fedoc.content["markdownCommands_strike.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements StrikeThrough markdown command\n * @author Junghwan Park(junghwan.park@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar CommandManager = require('../commandManager');\n\nvar strikeRegex = /^[~~](.*[\\s\\n]*.*)*[~~]$/;\n\n/**\n * Strike\n * Add strike markdown syntax to markdown editor\n * @exports Strike\n * @augments Command\n */\nvar Strike = CommandManager.command('markdown', /** @lends Strike */{\n    name: 'Strike',\n    keyMap: ['CTRL+S', 'META+S'],\n    /**\n     * Command handler\n     * @param {MarkdownEditor} mde MarkdownEditor instance\n     */\n    exec: function(mde) {\n        var cm = mde.getEditor();\n        var doc = cm.getDoc();\n        var cursor = doc.getCursor();\n        var selection = doc.getSelection();\n        var isNeedToRemove, isEmptySelection, result;\n\n        isNeedToRemove = this.hasStrikeSyntax(selection);\n        if (isNeedToRemove) {\n            result = this.remove(selection);\n        } else {\n            result = this.append(selection);\n        }\n\n        doc.replaceSelection(result, 'around');\n\n        isEmptySelection = !selection;\n        if (isEmptySelection &amp;&amp; !isNeedToRemove) {\n            this.setCursorToCenter(doc, cursor, isNeedToRemove);\n        }\n\n        cm.focus();\n    },\n    /**\n     * hasStrikeSyntax\n     * @param {string} text Source text\n     * @returns {boolean} Boolean value of strike syntax removal\n     */\n    hasStrikeSyntax: function(text) {\n        return strikeRegex.test(text);\n    },\n    /**\n     * append\n     * @param {string} text 적용할 텍스트\n     * @returns {string} strikeThrough text\n     */\n    append: function(text) {\n        return '~~' + text + '~~';\n    },\n    /**\n     * remove\n     * @param {string} text 제거할 텍스트\n     * @returns {string} 제거된 텍스트\n     */\n    remove: function(text) {\n        return text.substr(2, text.length - 4);\n    },\n    /**\n     * setCursorToCenter\n     * 커서를 중앙으로 이동시킨다\n     * @param {CodeMirror.doc} doc 코드미러 도큐먼트\n     * @param {object} cursor 커서객체\n     * @param {boolean} isRemoved 변경사항이 지우는 변경이었는지 여부\n     */\n    setCursorToCenter: function(doc, cursor, isRemoved) {\n        var pos = isRemoved ? -2 : 2;\n        doc.setCursor(cursor.line, cursor.ch + pos);\n    }\n});\n\nmodule.exports = Strike;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"