tui.util.defineNamespace("fedoc.content", {});
fedoc.content["ui_tab.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview tab버튼 UI를 그리는 객체가 정의되어 있다\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar UIController = require('./uicontroller'),\n    templater = require('./templater');\n\nvar util = tui.util;\n\nvar buttonTmpl = '&lt;button type=\"button\" data-index=\"${index}\">${name}&lt;/button>';\n\n/**\n * Tab\n * @exports Tab\n * @augments UIController\n * @constructor\n * @class\n * @param {object} options options\n * @param {string[]} options.items Button names to be created\n * @param {DOMElement[]} options.sections Dom elements for tab\n * @param {function} options.onItemClick when button is clicked pass button name to function\n * @example\n * var tab = new Tab({\n *     items: ['Editor', 'Preview'],\n *     sections: [this.$mdEditorContainerEl, this.$previewEl]\n * });\n */\nfunction Tab(options) {\n    UIController.call(this, {\n        tagName: 'div',\n        className: 'te-tab'\n    });\n\n    options = util.extend({}, options);\n\n    this.items = options.items;\n    this.sections = options.sections;\n\n    this._$activeButton = null;\n\n    this.render();\n    this._initItemClickEvent(options.onItemClick);\n\n    this._applyInitName(options.initName);\n}\n\nTab.prototype = util.extend(\n    {},\n    UIController.prototype\n);\n\n/**\n * render\n * render UI\n */\nTab.prototype.render = function() {\n    var buttonHtml;\n\n    buttonHtml = templater(buttonTmpl, this._getButtonData());\n\n    this.$el.html(buttonHtml);\n\n    this.attachEvents({\n        'click button': '_onButtonClick'\n    });\n};\n\n/**\n * _applyInitName\n * Apply initial section by button item name\n * @param {string} initName Button name to activate\n */\nTab.prototype._applyInitName = function(initName) {\n    if (initName) {\n        this.activate(initName);\n    }\n};\n\n/**\n * _getButtonData\n * Make button data by this.items\n * @returns {object[]} Button data\n */\nTab.prototype._getButtonData = function() {\n    var buttonData = [],\n        i,\n        len;\n\n    for (i = 0, len = this.items.length; i &lt; len; i += 1) {\n        buttonData.push({\n            name: this.items[i],\n            index: i\n        });\n    }\n\n    return buttonData;\n};\n\n/**\n * _onButtonClick\n * Button click handler\n * @param {event} ev Event object\n */\nTab.prototype._onButtonClick = function(ev) {\n    var $button = $(ev.target);\n    this._activateTabByButton($button);\n};\n\n/**\n * _deactivate\n * Deactive active section and button\n */\nTab.prototype._deactivate = function() {\n    if (this._$activeButton) {\n        this._$activeButton.removeClass('te-tab-active');\n\n        if (this.sections) {\n            this.sections[this._$activeButton.attr('data-index')].removeClass('te-tab-active');\n        }\n    }\n};\n\n/**\n * _activateButton\n * Activate button\n * @param {jQuery} $button button to activate\n */\nTab.prototype._activateButton = function($button) {\n    this._$activeButton = $button;\n    this._$activeButton.addClass('te-tab-active');\n};\n\n/**\n * _activateSection\n * Activate Section\n * @param {number} index Section index to activate\n */\nTab.prototype._activateSection = function(index) {\n    if (this.sections) {\n        this.sections[index].addClass('te-tab-active');\n    }\n};\n\n/**\n * activate\n * Activate Section &amp; Button\n * @param {string} name button name to activate\n */\nTab.prototype.activate = function(name) {\n    var $button = this.$el.find('button:contains(\"' + name + '\")');\n    this._activateTabByButton($button);\n};\n\n/**\n * _activateTabByButton\n * Activate tab section by button\n * @param {jQuery} $button button to activate\n */\nTab.prototype._activateTabByButton = function($button) {\n    if (this._isActivatedButton($button)) {\n        return;\n    }\n\n    this._deactivate();\n\n    this._activateButton($button);\n    this._activateSection($button.attr('data-index'));\n\n    this.trigger('itemClick', $button.text());\n};\n\n/**\n * _isActivatedButton\n * Check passed button is activated\n * @param {jQuery} $button Button to check\n * @returns {boolean} result\n */\nTab.prototype._isActivatedButton = function($button) {\n    return this._$activeButton &amp;&amp; this._$activeButton.text() === $button.text();\n};\n\n/**\n * _initItemClickEvent\n * Initialize itemClick event handler\n * @param {function} handler Function to invoke when button is clicked\n */\nTab.prototype._initItemClickEvent = function(handler) {\n    if (handler) {\n        this.on('itemClick', handler);\n    }\n};\n\nmodule.exports = Tab;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"