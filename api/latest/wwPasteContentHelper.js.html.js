tui.util.defineNamespace("fedoc.content", {});
fedoc.content["wwPasteContentHelper.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements WwPasteContentHelper\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar domUtils = require('./domUtils');\n\nvar util = tui.util;\n\n/**\n * WwPasteContentHelper\n * @exports WwPasteContentHelper\n * @class WwPasteContentHelper\n * @constructor\n * @param {WysiwygEditor} wwe wysiwygEditor instance\n */\nfunction WwPasteContentHelper(wwe) {\n    this.wwe = wwe;\n}\n\n/**\n * Process paste data before paste\n * @api\n * @memberOf WwPasteContentHelper\n * @param {object} pasteData Pasting data\n */\nWwPasteContentHelper.prototype.preparePaste = function(pasteData) {\n    var range = this.wwe.getEditor().getSelection().cloneRange();\n    var newFragment = this.wwe.getEditor().getDocument().createDocumentFragment();\n    var firstBlockIsTaken = false;\n    var nodeName, node, childNodes;\n\n    this._pasteFirstAid(pasteData.fragment);\n\n    childNodes = util.toArray(pasteData.fragment.childNodes);\n\n    //prepare to paste as inline of first node if possible\n    //앞부분의 인라인으로 붙일수 있느부분은 인라인으로 붙을수 있도록 처리\n    if (childNodes.length &amp;&amp; childNodes[0].tagName === 'DIV') {\n        $(newFragment).append(this._unwrapFragmentFirstChildForPasteAsInline(childNodes[0]));\n        childNodes.shift();\n    }\n\n    while (childNodes.length) {\n        node = childNodes[0];\n        nodeName = domUtils.getNodeName(node);\n\n        if (this.wwe.getManager('codeblock').isInCodeBlock(range)) {\n            newFragment.appendChild(this.wwe.getManager('codeblock').prepareToPasteOnCodeblock(childNodes));\n        } else if (nodeName === 'LI' || nodeName === 'UL' || nodeName === 'OL') {\n            newFragment.appendChild(this._prepareToPasteList(childNodes, pasteData.rangeInfo, firstBlockIsTaken));\n            //첫번째 현재위치와 병합될 가능성이있는 컨텐츠가 만들어진경우는 이후 위치에 대한 정보가 필요없다\n            firstBlockIsTaken = true;\n        } else {\n            $(newFragment).append(childNodes.shift());\n        }\n    }\n\n    pasteData.fragment = newFragment;\n};\n\n/**\n * Wrap textNodes with div element\n * @param {DocumentFragment} fragment - Fragment of paste data\n * @memberOf WwPasteContentHelper\n * @private\n */\nWwPasteContentHelper.prototype._wrapTextNodeWithDiv = function(fragment) {\n    var array = util.toArray(fragment.childNodes);\n\n    util.forEachArray(array, function(node) {\n        var divElement;\n        var isTextNode = node.nodeType === 3;\n\n        if (isTextNode) {\n            divElement = document.createElement('div');\n\n            divElement.innerHTML = node.nodeValue + '&lt;br>';\n\n            fragment.replaceChild(divElement, node);\n        }\n    });\n};\n\n/**\n * Processing paste data after paste\n * @param {DocumentFragment} fragment Pasting data\n * @memberOf WwPasteContentHelper\n * @private\n */\nWwPasteContentHelper.prototype._pasteFirstAid = function(fragment) {\n    var self = this;\n\n    $(fragment).find('iframe, script, select, form, button, .Apple-converted-space').remove();\n\n    this._removeUnnecessaryBlocks(fragment);\n    this._removeStyles(fragment);\n\n    this._wrapTextNodeWithDiv(fragment);\n\n    this._preElementAid(fragment);\n\n    //br은 preElemnetAid에서 필요해서 처리후 불필요한 br은 삭제한다.\n    $(fragment).find('br').remove();\n\n    $(fragment).find('*').each(function() {\n        self._removeStyles(this);\n    });\n};\n\n/**\n * PRE tag formatting\n * @memberOf WwPasteContentHelper\n * @private\n * @param {DocumentFragment} nodes Pasting DocumentFragment\n */\nWwPasteContentHelper.prototype._preElementAid = function(nodes) {\n    var textLines;\n\n    $(nodes).find('PRE').each(function(index, pre) {\n        //코드태그가 있으면 코드단위로 라인 구분\n        if ($(pre).has('code').length) {\n            textLines = [];\n\n            $(pre).find('code').each(function() {\n                textLines.push($(this).text().replace(/\\n/g, ''));\n            });\n            //코드태그가 없으면 개행단위로 라인 구분\n        } else {\n            $(pre).find('br').replaceWith('\\n');\n            textLines = $(pre).text().split(/\\n/g);\n        }\n\n        $(pre).empty();\n\n        textLines.forEach(function(line) {\n            var lineDom = $('&lt;div>&lt;code />&lt;br/>&lt;/div>');\n\n            lineDom.find('code').text(line);\n            $(pre).append(lineDom);\n        });\n    });\n};\n\n/**\n * Remove unnecessary block element in pasting data\n * @param {DocumentFragment} nodes Pasting DocumentFragment\n * @memberOf WwPasteContentHelper\n * @private\n */\nWwPasteContentHelper.prototype._removeUnnecessaryBlocks = function(nodes) {\n    var blocks;\n    var blockTags = 'div, section, article, aside, nav, menus';\n\n    blocks = $(nodes).find(blockTags);\n\n    while (blocks.length) {\n        $(blocks).replaceWith(function() {\n            return $(this).html();\n        });\n\n        blocks = $(nodes).find(blockTags);\n    }\n};\n\n/**\n * Remove inline style\n * @param {Node} node Node for remove style attribute\n * @memberOf WwPasteContentHelper\n * @private\n */\nWwPasteContentHelper.prototype._removeStyles = function(node) {\n    var $node = $(node);\n    var colorValue;\n\n    if (domUtils.getNodeName($node[0]) !== 'SPAN') {\n        $node.removeAttr('style');\n    } else {\n        colorValue = $node.css('color');\n        $node.removeAttr('style');\n\n        if (colorValue) {\n            $node.css('color', colorValue);\n        } else {\n            $node.children().unwrap();\n        }\n    }\n};\n\n/**\n * Processing before paste list\n * @param {Array.&lt;HTMLElement>} nodes Pasting data\n * @param {object} rangeInfo Range information\n * @param {boolean} firstBlockIsTaken Whether first block element taken or not\n * @returns {DocumentFragment}\n * @memberOf WwPasteContentHelper\n * @private\n */\nWwPasteContentHelper.prototype._prepareToPasteList = function(nodes, rangeInfo, firstBlockIsTaken) {\n    var listGroup;\n    var nodeName = domUtils.getNodeName(nodes[0]);\n    var node = nodes.shift();\n    var newFragment = this.wwe.getEditor().getDocument().createDocumentFragment();\n\n    //IE에서는 LI-UL 구조에서 UL이 전체가 선택되었는데 LI를 포함하지 않고 UL만 넘어올때가 있다.\n    if (nodeName !== 'LI' &amp;&amp; nodes.length &amp;&amp; nodes[0].tagName === 'LI') {\n        nodeName = 'LI';\n\n        node = this._makeNodeAndAppend({\n            tagName: nodeName\n        }, node);\n    }\n\n    //UL과 OL이고 리스트에 paste하는경우 뎊스처리\n    if (nodeName === 'OL' || nodeName === 'UL') {\n        //페이스트 데이터의 첫번째 블럭요소가 이미 만들어졌다면 커서의 위치에 대한 대응은 하지 않는다.\n        if (!firstBlockIsTaken &amp;&amp; this.wwe.getEditor().hasFormat('LI')) {\n            $(newFragment).append(this._wrapCurrentFormat(node));\n        } else {\n            $(newFragment).append(node);\n        }\n    } else if (nodeName === 'LI') {\n        //리스트 그룹처리\n        listGroup = this.wwe.getEditor().getDocument().createDocumentFragment();\n        listGroup.appendChild(node);\n\n        while (nodes.length &amp;&amp; nodes[0].tagName === 'LI') {\n            listGroup.appendChild(nodes.shift());\n        }\n\n        //리스트에 붙는경우 뎊스 연결\n        //페이스트 데이터의 첫번째 블럭요소가 이미 만들어졌다면 커서의 위치에 대한 대응은 하지 않는다.\n        if (!firstBlockIsTaken &amp;&amp; this.wwe.getEditor().hasFormat('LI')) {\n            $(newFragment).append(this._wrapCurrentFormat(listGroup));\n        //카피할당시의 정보가 있다면 해당 리스트로 만듬\n        } else if (rangeInfo\n                   &amp;&amp; (rangeInfo.commonAncestorName === 'UL' || rangeInfo.commonAncestorName === 'OL')) {\n            $(newFragment).append(this._makeNodeAndAppend({\n                tagName: rangeInfo.commonAncestorName\n            }, listGroup));\n        //외부에서온 리스트\n        } else {\n            $(newFragment).append(this._makeNodeAndAppend({\n                tagName: 'UL'\n            }, listGroup));\n        }\n    }\n\n    return newFragment;\n};\n\n/**\n * Unwrap fragment first child for pasting node inline\n * @memberOf WwPasteContentHelper\n * @private\n * @param {Node} node Pasting DocumentFragment\n * @returns {NodeList}\n */\nWwPasteContentHelper.prototype._unwrapFragmentFirstChildForPasteAsInline = function(node) {\n    $(node).find('br').remove();\n\n    return node.childNodes;\n};\n\n/**\n * Wrap nodes with current format\n * @param {DocumentFragment} nodes P\n * @returns {HTMLElement}\n * @private\n */\nWwPasteContentHelper.prototype._wrapCurrentFormat = function(nodes) {\n    var self = this;\n    var currentTagName;\n\n    // 붙여질 뎊스에 맞게 확장\n    this._eachCurrentPath(function(path) {\n        if (path.tagName !== 'DIV') {\n            // 프레그먼트 노드인경우와 한번이상 감싸진 노드임\n            if (domUtils.isElemNode(nodes)) {\n                currentTagName = nodes.tagName;\n            } else {\n                currentTagName = nodes.firstChild.tagName;\n            }\n\n            if (path.tagName !== currentTagName) {\n                nodes = self._makeNodeAndAppend(path, nodes);\n            }\n        }\n    });\n\n    return nodes;\n};\n\nWwPasteContentHelper.prototype._eachCurrentPath = function(iteratee) {\n    var paths = domUtils.getPath(this.wwe.getEditor().getSelection().startContainer, this.wwe.get$Body()[0]);\n    var i;\n\n    for (i = paths.length - 1; i > -1; i -= 1) {\n        iteratee(paths[i]);\n    }\n};\n\n/** _makeNodeAndAppend\n * make node and append their own children\n * @param {HTMLElement} pathInfo HTMLElement to make\n * @param {HTMLElement} content Nodes to append\n * @returns {HTMLElement} node\n * @memberOf WwPasteContentHelper\n * @private\n */\nWwPasteContentHelper.prototype._makeNodeAndAppend = function(pathInfo, content) {\n    var node = $('&lt;' + pathInfo.tagName + '/>');\n\n    node.append(content);\n\n    if (pathInfo.id) {\n        node.attr('id', pathInfo.id);\n    }\n\n    if (pathInfo.className) {\n        node.addClass(pathInfo.className);\n    }\n\n    return node[0];\n};\n\nmodule.exports = WwPasteContentHelper;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"