tui.util.defineNamespace("fedoc.content", {});
fedoc.content["markdownItPlugins_markdownitCodeBlockPlugin.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>// Copyright (c) 2016, Revin Guillen.\n// Distributed under an MIT license: https://github.com/revin/markdown-it-task-lists/\n/* eslint-disable */\n/**\n * @fileoverview Implements markdownitCodeBlockPlugin\n * @modifier Sungho Kim(sungho-kim@nhnent.com) FE Development Lab/NHN Ent.\n * @modifier Junghwan Park(junghwan.park@nhnent.com) FE Development Lab/NHN Ent.\n */\n\n/**\n * Code block renderer for Markdown-it\n * @param {object} markdownit Markdown-it instance\n */\nvar MarkdownitCodeBlockRenderer = function(markdownit) {\n    markdownit.core.ruler.after('block', 'tui-code-block', function(state) {\n        var tokens = state.tokens;\n        var currentToken, tokenIndex;\n\n        for (tokenIndex = 0; tokenIndex &lt; tokens.length; tokenIndex += 1) {\n            currentToken = tokens[tokenIndex];\n\n            if (isCodeFenceToken(currentToken) &amp;&amp; currentToken.info) {\n                setTokenAttribute(currentToken, 'data-language', escape(currentToken.info.replace(' ', ''), true));\n            }\n        }\n    });\n};\n\n/**\n * Set attribute of passed token\n * @param {object} token Token object\n * @param {string} attributeName Attribute name for set\n * @param {string} attributeValue Attribute value for set\n */\nfunction setTokenAttribute(token, attributeName, attributeValue) {\n    var index = token.attrIndex(attributeName);\n    var attr = [attributeName, attributeValue];\n\n    if (index &lt; 0) {\n        token.attrPush(attr);\n    } else {\n        token.attrs[index] = attr;\n    }\n}\n/**\n * Return boolean value whether passed token is code fence or not\n * @param {object} token Token object\n * @returns {boolean}\n */\nfunction isCodeFenceToken(token) {\n    return token.block === true\n        &amp;&amp; token.tag === 'code'\n        &amp;&amp; token.type === 'fence';\n}\n\n/**\n * escape code from markdown-it\n * @param {string} html HTML string\n * @param {string} encode Boolean value of whether encode or not\n * @returns {string}\n */\nfunction escape(html, encode) {\n    return html.replace(!encode ? /&amp;(?!#?\\w+;)/g : /&amp;/g, '&amp;amp;')\n    .replace(/&lt;/g, '&amp;lt;')\n    .replace(/>/g, '&amp;gt;')\n    .replace(/\"/g, '&amp;quot;')\n    .replace(/'/g, '&amp;#39;');\n}\n/* eslint-enable */\n\nmodule.exports = MarkdownitCodeBlockRenderer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"