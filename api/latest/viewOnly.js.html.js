tui.util.defineNamespace("fedoc.content", {});
fedoc.content["viewOnly.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar Preview = require('./preview'),\n    EventManager = require('./eventManager'),\n    CommandManager = require('./commandManager'),\n    extManager = require('./extManager'),\n    Convertor = require('./convertor');\n\nvar util = tui.util;\n\n/**\n * ViewOnly\n * @exports ToastUIEditorViewOnly\n * @constructor\n * @class ToastUIEditorViewOnly\n * @param {object} options Option object\n    * @param {string} options.initialValue Editor's initial value\n    * @param {object} options.events eventlist Event list\n         * @param {function} options.events.load It would be emitted when editor fully load\n         * @param {function} options.events.change It would be emitted when content changed\n         * @param {function} options.events.stateChange It would be emitted when format change by cursor position\n         * @param {function} options.events.focus It would be emitted when editor get focus\n         * @param {function} options.events.blur It would be emitted when editor loose focus\n     * @param {object} options.hooks Hook list\n         * @param {function} options.hooks.previewBeforeHook Submit preview to hook URL before preview be shown\n */\nfunction ToastUIEditorViewOnly(options) {\n    var self = this;\n\n    this.options = options;\n\n    this.eventManager = new EventManager();\n\n    this.commandManager = new CommandManager(this);\n    this.convertor = new Convertor(this.eventManager);\n\n    if (this.options.hooks) {\n        util.forEach(this.options.hooks, function(fn, key) {\n            self.addHook(key, fn);\n        });\n    }\n\n    if (this.options.events) {\n        util.forEach(this.options.events, function(fn, key) {\n            self.on(key, fn);\n        });\n    }\n\n    this.preview = new Preview($(self.options.el), this.eventManager, this.convertor);\n\n    extManager.applyExtension(self, self.options.exts);\n\n    self.setValue(self.options.initialValue);\n\n    self.eventManager.emit('load', self);\n}\n\n/**\n * Set content for preview\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @param {string} markdown Markdown text\n */\nToastUIEditorViewOnly.prototype.setValue = function(markdown) {\n    this.markdownValue = markdown = markdown || '';\n\n    this.preview.refresh(this.markdownValue);\n    this.eventManager.emit('setValueAfter', this.markdownValue);\n};\n\n/**\n * Get content of preview\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @returns {string}\n */\nToastUIEditorViewOnly.prototype.getValue = function() {\n    return this.markdownValue;\n};\n\n/**\n * Bind eventHandler to event type\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @param {string} type Event type\n * @param {function} handler Event handler\n */\nToastUIEditorViewOnly.prototype.on = function(type, handler) {\n    this.eventManager.listen(type, handler);\n};\n\n/**\n * Unbind eventHandler from event type\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @param {string} type Event type\n */\nToastUIEditorViewOnly.prototype.off = function(type) {\n    this.eventManager.removeEventHandler(type);\n};\n\n/**\n * Remove ViewOnly preview from document\n * @api\n * @memberOf ToastUIEditorViewOnly\n */\nToastUIEditorViewOnly.prototype.remove = function() {\n    this.eventManager.emit('removeEditor');\n    this.options = null;\n    this.eventManager = null;\n    this.commandManager = null;\n    this.convertor = null;\n    this.preview = null;\n};\n\n/**\n * Add hook to ViewOnly preview's event\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @param {string} type Event type\n * @param {function} handler Event handler\n */\nToastUIEditorViewOnly.prototype.addHook = function(type, handler) {\n    this.eventManager.removeEventHandler(type);\n    this.eventManager.listen(type, handler);\n};\n\n/**\n * Return true\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @returns {boolean}\n */\nToastUIEditorViewOnly.prototype.isViewOnly = function() {\n    return true;\n};\n\n/**\n * Return false\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @returns {boolean}\n */\nToastUIEditorViewOnly.prototype.isMarkdownMode = function() {\n    return false;\n};\n\n/**\n * Return false\n * @api\n * @memberOf ToastUIEditorViewOnly\n * @returns {boolean}\n */\nToastUIEditorViewOnly.prototype.isWysiwygMode = function() {\n    return false;\n};\n\nmodule.exports = ToastUIEditorViewOnly;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"