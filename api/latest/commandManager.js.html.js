tui.util.defineNamespace("fedoc.content", {});
fedoc.content["commandManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Implements CommandManager\n * @author Sungho Kim(sungho-kim@nhnent.com) FE Development Team/NHN Ent.\n */\n\n'use strict';\n\nvar util = tui.util;\n\nvar Command = require('./command');\n\nvar isMac = /Mac/.test(navigator.platform),\n    KEYMAP_OS_INDEX = isMac ? 1 : 0;\n\n/**\n * CommandManager\n * @exports CommandManager\n * @constructor\n * @class CommandManager\n * @param {ToastUIEditor} base nedInstance\n */\nfunction CommandManager(base) {\n    this._command = new util.Map();\n    this._mdCommand = new util.Map();\n    this._wwCommand = new util.Map();\n    this.base = base;\n\n    this.keyMapCommand = {};\n\n    this._initEvent();\n}\n\n/**\n * Add command\n * @api\n * @memberOf CommandManager\n * @param {Command} command Command instance\n * @returns {Command} Command\n */\nCommandManager.prototype.addCommand = function(command) {\n    var name,\n        commandBase;\n\n    if (arguments.length === 2) {\n        command = CommandManager.command(arguments[0], arguments[1]);\n    }\n\n    name = command.getName();\n\n    if (command.isMDType()) {\n        commandBase = this._mdCommand;\n    } else if (command.isWWType()) {\n        commandBase = this._wwCommand;\n    } else if (command.isGlobalType()) {\n        commandBase = this._command;\n    }\n\n    commandBase.set(name, command);\n\n    if (command.keyMap) {\n        this.keyMapCommand[command.keyMap[KEYMAP_OS_INDEX]] = name;\n    }\n\n    return command;\n};\n\n\n/**\n * _initEvent\n * Bind event handler to eventManager\n * @private\n * @memberOf CommandManager\n */\nCommandManager.prototype._initEvent = function() {\n    var self = this;\n\n    this.base.eventManager.listen('command', function() {\n        self.exec.apply(self, arguments);\n    });\n\n    this.base.eventManager.listen('keyMap', function(ev) {\n        var command = self.keyMapCommand[ev.keyMap];\n\n        if (command) {\n            ev.data.preventDefault();\n            self.exec(command);\n        }\n    });\n};\n\n/**\n * Execute command\n * @api\n * @memberOf CommandManager\n * @param {String} name Command name\n * @returns {*}\n */\nCommandManager.prototype.exec = function(name) {\n    var commandToRun, result,\n        context = this.base,\n        args = util.toArray(arguments);\n\n    args.shift();\n\n    commandToRun = this._command.get(name);\n\n    if (!commandToRun) {\n        if (this.base.isMarkdownMode()) {\n            commandToRun = this._mdCommand.get(name);\n            context = this.base.mdEditor;\n        } else {\n            commandToRun = this._wwCommand.get(name);\n            context = this.base.wwEditor;\n        }\n    }\n\n    if (commandToRun) {\n        args.unshift(context);\n        result = commandToRun.exec.apply(commandToRun, args);\n    }\n\n    return result;\n};\n/**\n * Create command by given editor type and property object\n * @api\n * @memberOf CommandManager\n * @param {string} type Command type\n * @param {{name: string, keyMap: object}} props Property\n * @returns {*}\n */\nCommandManager.command = function(type, props) {\n    var command;\n\n    command = Command.factory(type, props.name, props.keyMap);\n\n    util.extend(command, props);\n\n    return command;\n};\n\n\nmodule.exports = CommandManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"